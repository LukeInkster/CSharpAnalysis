//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\luke.inkster\Documents\Visual Studio 2015\Projects\CSharpAnalysis\Grammar\CSharpParser.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApplication1 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class CSharpParser : Parser {
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_DOC_COMMENT=2, DELIMITED_DOC_COMMENT=3, 
		SINGLE_LINE_COMMENT=4, DELIMITED_COMMENT=5, WHITESPACES=6, SHARP=7, ABSTRACT=8, 
		ADD=9, ALIAS=10, ARGLIST=11, AS=12, ASCENDING=13, ASYNC=14, AWAIT=15, 
		BASE=16, BOOL=17, BREAK=18, BY=19, BYTE=20, CASE=21, CATCH=22, CHAR=23, 
		CHECKED=24, CLASS=25, CONST=26, CONTINUE=27, DECIMAL=28, DEFAULT=29, DELEGATE=30, 
		DESCENDING=31, DO=32, DOUBLE=33, DYNAMIC=34, ELSE=35, ENUM=36, EQUALS=37, 
		EVENT=38, EXPLICIT=39, EXTERN=40, FALSE=41, FINALLY=42, FIXED=43, FLOAT=44, 
		FOR=45, FOREACH=46, FROM=47, GET=48, GOTO=49, GROUP=50, IF=51, IMPLICIT=52, 
		IN=53, INT=54, INTERFACE=55, INTERNAL=56, INTO=57, IS=58, JOIN=59, LET=60, 
		LOCK=61, LONG=62, NAMEOF=63, NAMESPACE=64, NEW=65, NULL=66, OBJECT=67, 
		ON=68, OPERATOR=69, ORDERBY=70, OUT=71, OVERRIDE=72, PARAMS=73, PARTIAL=74, 
		PRIVATE=75, PROTECTED=76, PUBLIC=77, READONLY=78, REF=79, REMOVE=80, RETURN=81, 
		SBYTE=82, SEALED=83, SELECT=84, SET=85, SHORT=86, SIZEOF=87, STACKALLOC=88, 
		STATIC=89, STRING=90, STRUCT=91, SWITCH=92, THIS=93, THROW=94, TRUE=95, 
		TRY=96, TYPEOF=97, UINT=98, ULONG=99, UNCHECKED=100, UNSAFE=101, USHORT=102, 
		USING=103, VIRTUAL=104, VOID=105, VOLATILE=106, WHEN=107, WHERE=108, WHILE=109, 
		YIELD=110, IDENTIFIER=111, LITERAL_ACCESS=112, INTEGER_LITERAL=113, HEX_INTEGER_LITERAL=114, 
		REAL_LITERAL=115, CHARACTER_LITERAL=116, REGULAR_STRING=117, VERBATIUM_STRING=118, 
		INTERPOLATED_REGULAR_STRING_START=119, INTERPOLATED_VERBATIUM_STRING_START=120, 
		OPEN_BRACE=121, CLOSE_BRACE=122, OPEN_BRACKET=123, CLOSE_BRACKET=124, 
		OPEN_PARENS=125, CLOSE_PARENS=126, DOT=127, COMMA=128, COLON=129, SEMICOLON=130, 
		PLUS=131, MINUS=132, STAR=133, DIV=134, PERCENT=135, AMP=136, BITWISE_OR=137, 
		CARET=138, BANG=139, TILDE=140, ASSIGNMENT=141, LT=142, GT=143, INTERR=144, 
		DOUBLE_COLON=145, OP_COALESCING=146, OP_INC=147, OP_DEC=148, OP_AND=149, 
		OP_OR=150, OP_PTR=151, OP_EQ=152, OP_NE=153, OP_LE=154, OP_GE=155, OP_ADD_ASSIGNMENT=156, 
		OP_SUB_ASSIGNMENT=157, OP_MULT_ASSIGNMENT=158, OP_DIV_ASSIGNMENT=159, 
		OP_MOD_ASSIGNMENT=160, OP_AND_ASSIGNMENT=161, OP_OR_ASSIGNMENT=162, OP_XOR_ASSIGNMENT=163, 
		OP_LEFT_SHIFT=164, OP_LEFT_SHIFT_ASSIGNMENT=165, DOUBLE_CURLY_INSIDE=166, 
		OPEN_BRACE_INSIDE=167, REGULAR_CHAR_INSIDE=168, VERBATIUM_DOUBLE_QUOTE_INSIDE=169, 
		DOUBLE_QUOTE_INSIDE=170, REGULAR_STRING_INSIDE=171, VERBATIUM_INSIDE_STRING=172, 
		CLOSE_BRACE_INSIDE=173, FORMAT_STRING=174, DIRECTIVE_WHITESPACES=175, 
		DIGITS=176, DEFINE=177, UNDEF=178, ELIF=179, ENDIF=180, LINE=181, ERROR=182, 
		WARNING=183, REGION=184, ENDREGION=185, PRAGMA=186, DIRECTIVE_HIDDEN=187, 
		CONDITIONAL_SYMBOL=188, DIRECTIVE_NEW_LINE=189, TEXT=190, DOUBLE_CURLY_CLOSE_INSIDE=191;
	public const int
		RULE_compilation_unit = 0, RULE_namespace_or_type_name = 1, RULE_type = 2, 
		RULE_base_type = 3, RULE_simple_type = 4, RULE_numeric_type = 5, RULE_integral_type = 6, 
		RULE_floating_point_type = 7, RULE_class_type = 8, RULE_type_argument_list = 9, 
		RULE_argument_list = 10, RULE_argument = 11, RULE_expression = 12, RULE_non_assignment_expression = 13, 
		RULE_assignment = 14, RULE_assignment_operator = 15, RULE_conditional_expression = 16, 
		RULE_null_coalescing_expression = 17, RULE_conditional_or_expression = 18, 
		RULE_conditional_and_expression = 19, RULE_inclusive_or_expression = 20, 
		RULE_exclusive_or_expression = 21, RULE_and_expression = 22, RULE_equality_expression = 23, 
		RULE_relational_expression = 24, RULE_shift_expression = 25, RULE_additive_expression = 26, 
		RULE_multiplicative_expression = 27, RULE_unary_expression = 28, RULE_primary_expression = 29, 
		RULE_primary_expression_start = 30, RULE_member_access = 31, RULE_bracket_expression = 32, 
		RULE_indexer_argument = 33, RULE_predefined_type = 34, RULE_expression_list = 35, 
		RULE_object_or_collection_initializer = 36, RULE_object_initializer = 37, 
		RULE_member_initializer_list = 38, RULE_member_initializer = 39, RULE_initializer_value = 40, 
		RULE_collection_initializer = 41, RULE_element_initializer = 42, RULE_anonymous_object_initializer = 43, 
		RULE_member_declarator_list = 44, RULE_member_declarator = 45, RULE_unbound_type_name = 46, 
		RULE_generic_dimension_specifier = 47, RULE_isType = 48, RULE_lambda_expression = 49, 
		RULE_anonymous_function_signature = 50, RULE_explicit_anonymous_function_parameter_list = 51, 
		RULE_explicit_anonymous_function_parameter = 52, RULE_implicit_anonymous_function_parameter_list = 53, 
		RULE_anonymous_function_body = 54, RULE_query_expression = 55, RULE_from_clause = 56, 
		RULE_query_body = 57, RULE_query_body_clause = 58, RULE_let_clause = 59, 
		RULE_where_clause = 60, RULE_combined_join_clause = 61, RULE_orderby_clause = 62, 
		RULE_ordering = 63, RULE_select_or_group_clause = 64, RULE_query_continuation = 65, 
		RULE_statement = 66, RULE_embedded_statement = 67, RULE_simple_embedded_statement = 68, 
		RULE_block = 69, RULE_local_variable_declaration = 70, RULE_local_variable_declarator = 71, 
		RULE_local_variable_initializer = 72, RULE_local_constant_declaration = 73, 
		RULE_if_body = 74, RULE_switch_section = 75, RULE_switch_label = 76, RULE_statement_list = 77, 
		RULE_for_initializer = 78, RULE_for_iterator = 79, RULE_catch_clauses = 80, 
		RULE_specific_catch_clause = 81, RULE_general_catch_clause = 82, RULE_exception_filter = 83, 
		RULE_finally_clause = 84, RULE_resource_acquisition = 85, RULE_namespace_declaration = 86, 
		RULE_qualified_identifier = 87, RULE_namespace_body = 88, RULE_extern_alias_directives = 89, 
		RULE_extern_alias_directive = 90, RULE_using_directives = 91, RULE_using_directive = 92, 
		RULE_namespace_member_declarations = 93, RULE_namespace_member_declaration = 94, 
		RULE_type_declaration = 95, RULE_qualified_alias_member = 96, RULE_type_parameter_list = 97, 
		RULE_type_parameter = 98, RULE_class_base = 99, RULE_interface_type_list = 100, 
		RULE_type_parameter_constraints_clauses = 101, RULE_type_parameter_constraints_clause = 102, 
		RULE_type_parameter_constraints = 103, RULE_primary_constraint = 104, 
		RULE_secondary_constraints = 105, RULE_constructor_constraint = 106, RULE_class_body = 107, 
		RULE_class_member_declarations = 108, RULE_class_member_declaration = 109, 
		RULE_all_member_modifiers = 110, RULE_all_member_modifier = 111, RULE_common_member_declaration = 112, 
		RULE_typed_member_declaration = 113, RULE_constant_declarators = 114, 
		RULE_constant_declarator = 115, RULE_variable_declarators = 116, RULE_variable_declarator = 117, 
		RULE_variable_initializer = 118, RULE_return_type = 119, RULE_member_name = 120, 
		RULE_method_body = 121, RULE_formal_parameter_list = 122, RULE_fixed_parameters = 123, 
		RULE_fixed_parameter = 124, RULE_parameter_modifier = 125, RULE_parameter_array = 126, 
		RULE_accessor_declarations = 127, RULE_get_accessor_declaration = 128, 
		RULE_set_accessor_declaration = 129, RULE_accessor_modifier = 130, RULE_accessor_body = 131, 
		RULE_event_accessor_declarations = 132, RULE_add_accessor_declaration = 133, 
		RULE_remove_accessor_declaration = 134, RULE_overloadable_operator = 135, 
		RULE_conversion_operator_declarator = 136, RULE_constructor_initializer = 137, 
		RULE_body = 138, RULE_struct_interfaces = 139, RULE_struct_body = 140, 
		RULE_struct_member_declaration = 141, RULE_array_type = 142, RULE_rank_specifier = 143, 
		RULE_array_initializer = 144, RULE_variant_type_parameter_list = 145, 
		RULE_variant_type_parameter = 146, RULE_variance_annotation = 147, RULE_interface_base = 148, 
		RULE_interface_body = 149, RULE_interface_member_declaration = 150, RULE_interface_accessors = 151, 
		RULE_enum_base = 152, RULE_enum_body = 153, RULE_enum_member_declaration = 154, 
		RULE_global_attribute_section = 155, RULE_global_attribute_target = 156, 
		RULE_attributes = 157, RULE_attribute_section = 158, RULE_attribute_target = 159, 
		RULE_attribute_list = 160, RULE_attribute = 161, RULE_attribute_argument = 162, 
		RULE_pointer_type = 163, RULE_fixed_pointer_declarators = 164, RULE_fixed_pointer_declarator = 165, 
		RULE_fixed_pointer_initializer = 166, RULE_fixed_size_buffer_declarator = 167, 
		RULE_local_variable_initializer_unsafe = 168, RULE_right_arrow = 169, 
		RULE_right_shift = 170, RULE_right_shift_assignment = 171, RULE_literal = 172, 
		RULE_boolean_literal = 173, RULE_string_literal = 174, RULE_interpolated_regular_string = 175, 
		RULE_interpolated_verbatium_string = 176, RULE_interpolated_regular_string_part = 177, 
		RULE_interpolated_verbatium_string_part = 178, RULE_interpolated_string_expression = 179, 
		RULE_keyword = 180, RULE_class_definition = 181, RULE_struct_definition = 182, 
		RULE_interface_definition = 183, RULE_enum_definition = 184, RULE_delegate_definition = 185, 
		RULE_event_declaration = 186, RULE_field_declaration = 187, RULE_property_declaration = 188, 
		RULE_constant_declaration = 189, RULE_indexer_declaration = 190, RULE_destructor_definition = 191, 
		RULE_constructor_declaration = 192, RULE_method_declaration = 193, RULE_method_member_name = 194, 
		RULE_operator_declaration = 195, RULE_arg_declaration = 196, RULE_method_invocation = 197, 
		RULE_object_creation_expression = 198, RULE_identifier = 199;
	public static readonly string[] ruleNames = {
		"compilation_unit", "namespace_or_type_name", "type", "base_type", "simple_type", 
		"numeric_type", "integral_type", "floating_point_type", "class_type", 
		"type_argument_list", "argument_list", "argument", "expression", "non_assignment_expression", 
		"assignment", "assignment_operator", "conditional_expression", "null_coalescing_expression", 
		"conditional_or_expression", "conditional_and_expression", "inclusive_or_expression", 
		"exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
		"shift_expression", "additive_expression", "multiplicative_expression", 
		"unary_expression", "primary_expression", "primary_expression_start", 
		"member_access", "bracket_expression", "indexer_argument", "predefined_type", 
		"expression_list", "object_or_collection_initializer", "object_initializer", 
		"member_initializer_list", "member_initializer", "initializer_value", 
		"collection_initializer", "element_initializer", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "unbound_type_name", "generic_dimension_specifier", 
		"isType", "lambda_expression", "anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
		"explicit_anonymous_function_parameter", "implicit_anonymous_function_parameter_list", 
		"anonymous_function_body", "query_expression", "from_clause", "query_body", 
		"query_body_clause", "let_clause", "where_clause", "combined_join_clause", 
		"orderby_clause", "ordering", "select_or_group_clause", "query_continuation", 
		"statement", "embedded_statement", "simple_embedded_statement", "block", 
		"local_variable_declaration", "local_variable_declarator", "local_variable_initializer", 
		"local_constant_declaration", "if_body", "switch_section", "switch_label", 
		"statement_list", "for_initializer", "for_iterator", "catch_clauses", 
		"specific_catch_clause", "general_catch_clause", "exception_filter", "finally_clause", 
		"resource_acquisition", "namespace_declaration", "qualified_identifier", 
		"namespace_body", "extern_alias_directives", "extern_alias_directive", 
		"using_directives", "using_directive", "namespace_member_declarations", 
		"namespace_member_declaration", "type_declaration", "qualified_alias_member", 
		"type_parameter_list", "type_parameter", "class_base", "interface_type_list", 
		"type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
		"type_parameter_constraints", "primary_constraint", "secondary_constraints", 
		"constructor_constraint", "class_body", "class_member_declarations", "class_member_declaration", 
		"all_member_modifiers", "all_member_modifier", "common_member_declaration", 
		"typed_member_declaration", "constant_declarators", "constant_declarator", 
		"variable_declarators", "variable_declarator", "variable_initializer", 
		"return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "parameter_modifier", "parameter_array", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "overloadable_operator", "conversion_operator_declarator", 
		"constructor_initializer", "body", "struct_interfaces", "struct_body", 
		"struct_member_declaration", "array_type", "rank_specifier", "array_initializer", 
		"variant_type_parameter_list", "variant_type_parameter", "variance_annotation", 
		"interface_base", "interface_body", "interface_member_declaration", "interface_accessors", 
		"enum_base", "enum_body", "enum_member_declaration", "global_attribute_section", 
		"global_attribute_target", "attributes", "attribute_section", "attribute_target", 
		"attribute_list", "attribute", "attribute_argument", "pointer_type", "fixed_pointer_declarators", 
		"fixed_pointer_declarator", "fixed_pointer_initializer", "fixed_size_buffer_declarator", 
		"local_variable_initializer_unsafe", "right_arrow", "right_shift", "right_shift_assignment", 
		"literal", "boolean_literal", "string_literal", "interpolated_regular_string", 
		"interpolated_verbatium_string", "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
		"interpolated_string_expression", "keyword", "class_definition", "struct_definition", 
		"interface_definition", "enum_definition", "delegate_definition", "event_declaration", 
		"field_declaration", "property_declaration", "constant_declaration", "indexer_declaration", 
		"destructor_definition", "constructor_declaration", "method_declaration", 
		"method_member_name", "operator_declaration", "arg_declaration", "method_invocation", 
		"object_creation_expression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\u00EF\\u00BB\\u00BF'", null, null, null, null, null, "'#'", 
		"'abstract'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
		"'async'", "'await'", "'base'", "'bool'", "'break'", "'by'", "'byte'", 
		"'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", "'continue'", 
		"'decimal'", "'default'", "'delegate'", "'descending'", "'do'", "'double'", 
		"'dynamic'", "'else'", "'enum'", "'equals'", "'event'", "'explicit'", 
		"'extern'", "'false'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", 
		"'from'", "'get'", "'goto'", "'group'", "'if'", "'implicit'", "'in'", 
		"'int'", "'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", 
		"'lock'", "'long'", "'nameof'", "'namespace'", "'new'", "'null'", "'object'", 
		"'on'", "'operator'", "'orderby'", "'out'", "'override'", "'params'", 
		"'partial'", "'private'", "'protected'", "'public'", "'readonly'", "'ref'", 
		"'remove'", "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", 
		"'sizeof'", "'stackalloc'", "'static'", "'string'", "'struct'", "'switch'", 
		"'this'", "'throw'", "'true'", "'try'", "'typeof'", "'uint'", "'ulong'", 
		"'unchecked'", "'unsafe'", "'ushort'", "'using'", "'virtual'", "'void'", 
		"'volatile'", "'when'", "'where'", "'while'", "'yield'", null, null, null, 
		null, null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
		"'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<'", "'<<='", "'{{'", null, null, null, null, null, null, null, 
		null, null, null, "'define'", "'undef'", "'elif'", "'endif'", "'line'", 
		null, null, null, null, null, "'hidden'", null, null, null, "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", "SHARP", "ABSTRACT", 
		"ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", 
		"BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", 
		"CONST", "CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", 
		"DOUBLE", "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
		"FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", 
		"GOTO", "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", 
		"INTO", "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", "NEW", 
		"NULL", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", "PARAMS", 
		"PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
		"RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", 
		"STATIC", "STRING", "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", 
		"TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNSAFE", "USHORT", "USING", "VIRTUAL", 
		"VOID", "VOLATILE", "WHEN", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
		"INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
		"REGULAR_STRING", "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
		"INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", 
		"OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
		"OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
		"OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
		"OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "DOUBLE_CURLY_INSIDE", 
		"OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
		"DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", "VERBATIUM_INSIDE_STRING", 
		"CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", "DIGITS", 
		"DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", "REGION", 
		"ENDREGION", "PRAGMA", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", "DIRECTIVE_NEW_LINE", 
		"TEXT", "DOUBLE_CURLY_CLOSE_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CSharpParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(CSharpParser.BYTE_ORDER_MARK, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_la = _input.La(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 400; Match(BYTE_ORDER_MARK);
				}
			}

			State = 404;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 403; extern_alias_directives();
				}
				break;
			}
			State = 407;
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 406; using_directives();
				}
			}

			State = 412;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 409; global_attribute_section();
					}
					} 
				}
				State = 414;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			State = 416;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 415; namespace_member_declarations();
				}
			}

			State = 418; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_namespace_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 420; identifier();
				State = 422;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 421; type_argument_list();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 424; qualified_alias_member();
				}
				break;
			}
			State = 434;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 427; Match(DOT);
					State = 428; identifier();
					State = 430;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						State = 429; type_argument_list();
						}
						break;
					}
					}
					} 
				}
				State = 436;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; base_type();
			State = 443;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 441;
					switch (_input.La(1)) {
					case INTERR:
						{
						State = 438; Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 439; rank_specifier();
						}
						break;
					case STAR:
						{
						State = 440; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 445;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_base_type);
		try {
			State = 450;
			switch (_input.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446; simple_type();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 447; class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 448; Match(VOID);
				State = 449; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_simple_type);
		try {
			State = 454;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 452; numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 453; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_numeric_type);
		try {
			State = 459;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456; integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 457; floating_point_type();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (SBYTE - 82)) | (1L << (SHORT - 82)) | (1L << (UINT - 82)) | (1L << (ULONG - 82)) | (1L << (USHORT - 82)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_la = _input.La(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_class_type);
		try {
			State = 469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465; namespace_or_type_name();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466; Match(OBJECT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 467; Match(DYNAMIC);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 468; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_type_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(LT);
			State = 472; type();
			State = 477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 473; Match(COMMA);
				State = 474; type();
				}
				}
				State = 479;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 480; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; argument();
			State = 487;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 483; Match(COMMA);
				State = 484; argument();
				}
				}
				State = 489;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public IToken refout;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 490; identifier();
				State = 491; Match(COLON);
				}
				break;
			}
			State = 496;
			_la = _input.La(1);
			if (_la==OUT || _la==REF) {
				{
				State = 495;
				_localctx.refout = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OUT || _la==REF) ) {
					_localctx.refout = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
			}

			State = 498; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			State = 502;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 501; non_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_non_assignment_expression);
		try {
			State = 507;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; lambda_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; query_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 506; conditional_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; unary_expression();
			State = 510; assignment_operator();
			State = 511; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Right_shift_assignmentContext right_shift_assignment() {
			return GetRuleContext<Right_shift_assignmentContext>(0);
		}
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_assignment_operator);
		try {
			State = 524;
			switch (_input.La(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 514; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 515; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 516; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 517; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 518; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 519; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 520; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 521; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 522; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 523; right_shift_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_conditional_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526; null_coalescing_expression();
			State = 532;
			_la = _input.La(1);
			if (_la==INTERR) {
				{
				State = 527; Match(INTERR);
				State = 528; expression();
				State = 529; Match(COLON);
				State = 530; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_coalescing_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_null_coalescing_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; conditional_or_expression();
			State = 537;
			_la = _input.La(1);
			if (_la==OP_COALESCING) {
				{
				State = 535; Match(OP_COALESCING);
				State = 536; null_coalescing_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(CSharpParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(CSharpParser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_conditional_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; conditional_and_expression();
			State = 544;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OP_OR) {
				{
				{
				State = 540; Match(OP_OR);
				State = 541; conditional_and_expression();
				}
				}
				State = 546;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(CSharpParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(CSharpParser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_conditional_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; inclusive_or_expression();
			State = 552;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OP_AND) {
				{
				{
				State = 548; Match(OP_AND);
				State = 549; inclusive_or_expression();
				}
				}
				State = 554;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; exclusive_or_expression();
			State = 560;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 556; Match(BITWISE_OR);
				State = 557; exclusive_or_expression();
				}
				}
				State = 562;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; and_expression();
			State = 568;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CARET) {
				{
				{
				State = 564; Match(CARET);
				State = 565; and_expression();
				}
				}
				State = 570;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_and_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; equality_expression();
			State = 576;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 572; Match(AMP);
					State = 573; equality_expression();
					}
					} 
				}
				State = 578;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(CSharpParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(CSharpParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(CSharpParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(CSharpParser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; relational_expression();
			State = 584;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 580;
				_la = _input.La(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 581; relational_expression();
				}
				}
				State = 586;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public ITerminalNode[] IS() { return GetTokens(CSharpParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(CSharpParser.IS, i);
		}
		public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		public ITerminalNode[] AS() { return GetTokens(CSharpParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(CSharpParser.AS, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; shift_expression();
			State = 596;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AS || _la==IS || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (LT - 142)) | (1L << (GT - 142)) | (1L << (OP_LE - 142)) | (1L << (OP_GE - 142)))) != 0)) {
				{
				State = 594;
				switch (_input.La(1)) {
				case LT:
				case GT:
				case OP_LE:
				case OP_GE:
					{
					State = 588;
					_la = _input.La(1);
					if ( !(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (LT - 142)) | (1L << (GT - 142)) | (1L << (OP_LE - 142)) | (1L << (OP_GE - 142)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					State = 589; shift_expression();
					}
					break;
				case IS:
					{
					State = 590; Match(IS);
					State = 591; isType();
					}
					break;
				case AS:
					{
					State = 592; Match(AS);
					State = 593; type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 598;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 599; additive_expression();
			State = 607;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 602;
					switch (_input.La(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 600; Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 601; right_shift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 604; additive_expression();
					}
					} 
				}
				State = 609;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; multiplicative_expression();
			State = 615;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 611;
					_la = _input.La(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					State = 612; multiplicative_expression();
					}
					} 
				}
				State = 617;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_multiplicative_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; unary_expression();
			State = 623;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 619;
					_la = _input.La(1);
					if ( !(((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (STAR - 133)) | (1L << (DIV - 133)) | (1L << (PERCENT - 133)))) != 0)) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					State = 620; unary_expression();
					}
					} 
				}
				State = 625;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_unary_expression);
		try {
			State = 650;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626; primary_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; Match(PLUS);
				State = 628; unary_expression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 629; Match(MINUS);
				State = 630; unary_expression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 631; Match(BANG);
				State = 632; unary_expression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 633; Match(TILDE);
				State = 634; unary_expression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 635; Match(OP_INC);
				State = 636; unary_expression();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 637; Match(OP_DEC);
				State = 638; unary_expression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 639; Match(OPEN_PARENS);
				State = 640; type();
				State = 641; Match(CLOSE_PARENS);
				State = 642; unary_expression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 644; Match(AWAIT);
				State = 645; unary_expression();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 646; Match(AMP);
				State = 647; unary_expression();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 648; Match(STAR);
				State = 649; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext pe;
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		public Method_invocationContext[] method_invocation() {
			return GetRuleContexts<Method_invocationContext>();
		}
		public Method_invocationContext method_invocation(int i) {
			return GetRuleContext<Method_invocationContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_primary_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; _localctx.pe = primary_expression_start();
			State = 656;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 653; bracket_expression();
					}
					} 
				}
				State = 658;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			State = 675;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 665;
					switch (_input.La(1)) {
					case DOT:
					case INTERR:
						{
						State = 659; member_access();
						}
						break;
					case OPEN_PARENS:
						{
						State = 660; method_invocation();
						}
						break;
					case OP_INC:
						{
						State = 661; Match(OP_INC);
						}
						break;
					case OP_DEC:
						{
						State = 662; Match(OP_DEC);
						}
						break;
					case OP_PTR:
						{
						State = 663; Match(OP_PTR);
						State = 664; identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 670;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 667; bracket_expression();
							}
							} 
						}
						State = 672;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,39,_ctx);
					}
					}
					} 
				}
				State = 677;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
	 
		public Primary_expression_startContext() { }
		public virtual void CopyFrom(Primary_expression_startContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralAccessExpressionContext : Primary_expression_startContext {
		public ITerminalNode LITERAL_ACCESS() { return GetToken(CSharpParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultValueExpressionContext : Primary_expression_startContext {
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public DefaultValueExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseAccessExpressionContext : Primary_expression_startContext {
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public BaseAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBaseAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBaseAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SizeofExpressionContext : Primary_expression_startContext {
		public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public SizeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSizeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSizeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionsContext : Primary_expression_startContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThisReferenceExpressionContext : Primary_expression_startContext {
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ThisReferenceExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThisReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectCreationExpressionContext : Primary_expression_startContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ObjectCreationExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnonymousMethodExpressionContext : Primary_expression_startContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public AnonymousMethodExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymousMethodExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeofExpressionContext : Primary_expression_startContext {
		public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public TypeofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedExpressionContext : Primary_expression_startContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public UncheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpressionContext : Primary_expression_startContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public SimpleNameExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : Primary_expression_startContext {
		public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public MemberAccessExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedExpressionContext : Primary_expression_startContext {
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public CheckedExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : Primary_expression_startContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NameofExpressionContext : Primary_expression_startContext {
		public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public NameofExpressionContext(Primary_expression_startContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNameofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNameofExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameofExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_primary_expression_start);
		int _la;
		try {
			int _alt;
			State = 787;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 678; literal();
				}
				break;

			case 2:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 679; identifier();
				State = 681;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					State = 680; type_argument_list();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 683; Match(OPEN_PARENS);
				State = 684; expression();
				State = 685; Match(CLOSE_PARENS);
				}
				break;

			case 4:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 687; predefined_type();
				}
				break;

			case 5:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 688; qualified_alias_member();
				}
				break;

			case 6:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 689; Match(LITERAL_ACCESS);
				}
				break;

			case 7:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 690; Match(THIS);
				}
				break;

			case 8:
				_localctx = new BaseAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 691; Match(BASE);
				State = 701;
				switch (_input.La(1)) {
				case DOT:
					{
					State = 692; Match(DOT);
					State = 693; identifier();
					State = 695;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
					case 1:
						{
						State = 694; type_argument_list();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 697; Match(OPEN_BRACKET);
					State = 698; expression_list();
					State = 699; Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				_localctx = new ObjectCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 703; Match(NEW);
				State = 732;
				switch (_input.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 704; type();
					State = 726;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
					case 1:
						{
						State = 705; object_creation_expression();
						}
						break;

					case 2:
						{
						State = 706; object_or_collection_initializer();
						}
						break;

					case 3:
						{
						State = 707; Match(OPEN_BRACKET);
						State = 708; expression_list();
						State = 709; Match(CLOSE_BRACKET);
						State = 713;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
							if ( _alt==1 ) {
								{
								{
								State = 710; rank_specifier();
								}
								} 
							}
							State = 715;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
						}
						State = 717;
						_la = _input.La(1);
						if (_la==OPEN_BRACE) {
							{
							State = 716; array_initializer();
							}
						}

						}
						break;

					case 4:
						{
						State = 720;
						_errHandler.Sync(this);
						_la = _input.La(1);
						do {
							{
							{
							State = 719; rank_specifier();
							}
							}
							State = 722;
							_errHandler.Sync(this);
							_la = _input.La(1);
						} while ( _la==OPEN_BRACKET );
						State = 724; array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 728; anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 729; rank_specifier();
					State = 730; array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 10:
				_localctx = new TypeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 734; Match(TYPEOF);
				State = 735; Match(OPEN_PARENS);
				State = 739;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 736; unbound_type_name();
					}
					break;

				case 2:
					{
					State = 737; type();
					}
					break;

				case 3:
					{
					State = 738; Match(VOID);
					}
					break;
				}
				State = 741; Match(CLOSE_PARENS);
				}
				break;

			case 11:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 742; Match(CHECKED);
				State = 743; Match(OPEN_PARENS);
				State = 744; expression();
				State = 745; Match(CLOSE_PARENS);
				}
				break;

			case 12:
				_localctx = new UncheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 747; Match(UNCHECKED);
				State = 748; Match(OPEN_PARENS);
				State = 749; expression();
				State = 750; Match(CLOSE_PARENS);
				}
				break;

			case 13:
				_localctx = new DefaultValueExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 752; Match(DEFAULT);
				State = 753; Match(OPEN_PARENS);
				State = 754; type();
				State = 755; Match(CLOSE_PARENS);
				}
				break;

			case 14:
				_localctx = new AnonymousMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 758;
				_la = _input.La(1);
				if (_la==ASYNC) {
					{
					State = 757; Match(ASYNC);
					}
				}

				State = 760; Match(DELEGATE);
				State = 766;
				_la = _input.La(1);
				if (_la==OPEN_PARENS) {
					{
					State = 761; Match(OPEN_PARENS);
					State = 763;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
						{
						State = 762; explicit_anonymous_function_parameter_list();
						}
					}

					State = 765; Match(CLOSE_PARENS);
					}
				}

				State = 768; block();
				}
				break;

			case 15:
				_localctx = new SizeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 769; Match(SIZEOF);
				State = 770; Match(OPEN_PARENS);
				State = 771; type();
				State = 772; Match(CLOSE_PARENS);
				}
				break;

			case 16:
				_localctx = new NameofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 774; Match(NAMEOF);
				State = 775; Match(OPEN_PARENS);
				State = 781;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 776; identifier();
						State = 777; Match(DOT);
						}
						} 
					}
					State = 783;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,53,_ctx);
				}
				State = 784; identifier();
				State = 785; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_member_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			_la = _input.La(1);
			if (_la==INTERR) {
				{
				State = 789; Match(INTERR);
				}
			}

			State = 792; Match(DOT);
			State = 793; identifier();
			State = 795;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 794; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public Indexer_argumentContext[] indexer_argument() {
			return GetRuleContexts<Indexer_argumentContext>();
		}
		public Indexer_argumentContext indexer_argument(int i) {
			return GetRuleContext<Indexer_argumentContext>(i);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_bracket_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			_la = _input.La(1);
			if (_la==INTERR) {
				{
				State = 797; Match(INTERR);
				}
			}

			State = 800; Match(OPEN_BRACKET);
			State = 801; indexer_argument();
			State = 806;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 802; Match(COMMA);
				State = 803; indexer_argument();
				}
				}
				State = 808;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 809; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_argumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Indexer_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_argumentContext indexer_argument() {
		Indexer_argumentContext _localctx = new Indexer_argumentContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_indexer_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 811; identifier();
				State = 812; Match(COLON);
				}
				break;
			}
			State = 816; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (SBYTE - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820; expression();
			State = 825;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 821; Match(COMMA);
				State = 822; expression();
				}
				}
				State = 827;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_or_collection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_object_or_collection_initializer);
		try {
			State = 830;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 828; object_initializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 829; collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832; Match(OPEN_BRACE);
			State = 837;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (OPEN_BRACKET - 68)))) != 0)) {
				{
				State = 833; member_initializer_list();
				State = 835;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 834; Match(COMMA);
					}
				}

				}
			}

			State = 839; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 841; member_initializer();
			State = 846;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 842; Match(COMMA);
					State = 843; member_initializer();
					}
					} 
				}
				State = 848;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 849; identifier();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 850; Match(OPEN_BRACKET);
				State = 851; expression();
				State = 852; Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 856; Match(ASSIGNMENT);
			State = 857; initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_initializer_value);
		try {
			State = 861;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 859; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_collection_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; Match(OPEN_BRACE);
			State = 864; element_initializer();
			State = 869;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 865; Match(COMMA);
					State = 866; element_initializer();
					}
					} 
				}
				State = 871;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,67,_ctx);
			}
			State = 873;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 872; Match(COMMA);
				}
			}

			State = 875; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_element_initializer);
		try {
			State = 882;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 877; non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 878; Match(OPEN_BRACE);
				State = 879; expression_list();
				State = 880; Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_anonymous_object_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884; Match(OPEN_BRACE);
			State = 889;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0)) {
				{
				State = 885; member_declarator_list();
				State = 887;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 886; Match(COMMA);
					}
				}

				}
			}

			State = 891; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 893; member_declarator();
			State = 898;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,72,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 894; Match(COMMA);
					State = 895; member_declarator();
					}
					} 
				}
				State = 900;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,72,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_member_declarator);
		try {
			State = 906;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 901; primary_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 902; identifier();
				State = 903; Match(ASSIGNMENT);
				State = 904; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnbound_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908; identifier();
			State = 917;
			switch (_input.La(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 910;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 909; generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 912; Match(DOUBLE_COLON);
				State = 913; identifier();
				State = 915;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 914; generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 926;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 919; Match(DOT);
				State = 920; identifier();
				State = 922;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 921; generic_dimension_specifier();
					}
				}

				}
				}
				State = 928;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_dimension_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; Match(LT);
			State = 933;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 930; Match(COMMA);
				}
				}
				State = 935;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 936; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_isType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; base_type();
			State = 943;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 941;
					switch (_input.La(1)) {
					case OPEN_BRACKET:
						{
						State = 939; rank_specifier();
						}
						break;
					case STAR:
						{
						State = 940; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 945;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,81,_ctx);
			}
			State = 947;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 946; Match(INTERR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 949; Match(ASYNC);
				}
				break;
			}
			State = 952; anonymous_function_signature();
			State = 953; right_arrow();
			State = 954; anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_anonymous_function_signature);
		try {
			State = 967;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 956; Match(OPEN_PARENS);
				State = 957; Match(CLOSE_PARENS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 958; Match(OPEN_PARENS);
				State = 959; explicit_anonymous_function_parameter_list();
				State = 960; Match(CLOSE_PARENS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 962; Match(OPEN_PARENS);
				State = 963; implicit_anonymous_function_parameter_list();
				State = 964; Match(CLOSE_PARENS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 966; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969; explicit_anonymous_function_parameter();
			State = 974;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 970; Match(COMMA);
				State = 971; explicit_anonymous_function_parameter();
				}
				}
				State = 976;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public IToken refout;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			_la = _input.La(1);
			if (_la==OUT || _la==REF) {
				{
				State = 977;
				_localctx.refout = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==OUT || _la==REF) ) {
					_localctx.refout = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
			}

			State = 980; type();
			State = 981; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983; identifier();
			State = 988;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 984; Match(COMMA);
				State = 985; identifier();
				}
				}
				State = 990;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_anonymous_function_body);
		try {
			State = 993;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 991; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 992; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995; from_clause();
			State = 996; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 998; Match(FROM);
			State = 1000;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				State = 999; type();
				}
				break;
			}
			State = 1002; identifier();
			State = 1003; Match(IN);
			State = 1004; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (FROM - 47)) | (1L << (JOIN - 47)) | (1L << (LET - 47)) | (1L << (ORDERBY - 47)) | (1L << (WHERE - 47)))) != 0)) {
				{
				{
				State = 1006; query_body_clause();
				}
				}
				State = 1011;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1012; select_or_group_clause();
			State = 1014;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 1013; query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_query_body_clause);
		try {
			State = 1021;
			switch (_input.La(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1016; from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1017; let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1018; where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1019; combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1020; orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023; Match(LET);
			State = 1024; identifier();
			State = 1025; Match(ASSIGNMENT);
			State = 1026; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028; Match(WHERE);
			State = 1029; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombined_join_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031; Match(JOIN);
			State = 1033;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 1032; type();
				}
				break;
			}
			State = 1035; identifier();
			State = 1036; Match(IN);
			State = 1037; expression();
			State = 1038; Match(ON);
			State = 1039; expression();
			State = 1040; Match(EQUALS);
			State = 1041; expression();
			State = 1044;
			_la = _input.La(1);
			if (_la==INTO) {
				{
				State = 1042; Match(INTO);
				State = 1043; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_orderby_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046; Match(ORDERBY);
			State = 1047; ordering();
			State = 1052;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1048; Match(COMMA);
				State = 1049; ordering();
				}
				}
				State = 1054;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public IToken dir;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055; expression();
			State = 1057;
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1056;
				_localctx.dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.dir = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_select_or_group_clause);
		try {
			State = 1066;
			switch (_input.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1059; Match(SELECT);
				State = 1060; expression();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1061; Match(GROUP);
				State = 1062; expression();
				State = 1063; Match(BY);
				State = 1064; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_continuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068; Match(INTO);
			State = 1069; identifier();
			State = 1070; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationStatementContext : StatementContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		public DeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmbeddedStatementContext : StatementContext {
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public EmbeddedStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabeledStatementContext : StatementContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_statement);
		try {
			State = 1083;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				_localctx = new LabeledStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1072; identifier();
				State = 1073; Match(COLON);
				State = 1074; statement();
				}
				break;

			case 2:
				_localctx = new DeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1078;
				switch (_input.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1076; local_variable_declaration();
					}
					break;
				case CONST:
					{
					State = 1077; local_constant_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1080; Match(SEMICOLON);
				}
				break;

			case 3:
				_localctx = new EmbeddedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1082; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_embedded_statement);
		try {
			State = 1087;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1085; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1086; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
	 
		public Simple_embedded_statementContext() { }
		public virtual void CopyFrom(Simple_embedded_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatementContext : Simple_embedded_statementContext {
		public EmptyStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TryStatementContext : Simple_embedded_statementContext {
		public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public TryStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ThrowStatementContext : Simple_embedded_statementContext {
		public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeschStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ForeschStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForeschStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForeschStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeschStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsafeStatementContext : Simple_embedded_statementContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UnsafeStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnsafeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnsafeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public ForStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : Simple_embedded_statementContext {
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public BreakStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : Simple_embedded_statementContext {
		public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		public IfStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : Simple_embedded_statementContext {
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GotoStatementContext : Simple_embedded_statementContext {
		public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public GotoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementContext : Simple_embedded_statementContext {
		public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public SwitchStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FixedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public FixedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : Simple_embedded_statementContext {
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public WhileStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoStatementContext : Simple_embedded_statementContext {
		public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public DoStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UncheckedStatementContext : Simple_embedded_statementContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UncheckedStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUncheckedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : Simple_embedded_statementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : Simple_embedded_statementContext {
		public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		public ContinueStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStatementContext : Simple_embedded_statementContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public UsingStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LockStatementContext : Simple_embedded_statementContext {
		public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public LockStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YieldStatementContext : Simple_embedded_statementContext {
		public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public YieldStatementContext(Simple_embedded_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_simple_embedded_statement);
		int _la;
		try {
			State = 1216;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1089; Match(SEMICOLON);
				}
				break;

			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1090; expression();
				State = 1091; Match(SEMICOLON);
				}
				break;

			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1093; Match(IF);
				State = 1094; Match(OPEN_PARENS);
				State = 1095; expression();
				State = 1096; Match(CLOSE_PARENS);
				State = 1097; if_body();
				State = 1100;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					State = 1098; Match(ELSE);
					State = 1099; if_body();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1102; Match(SWITCH);
				State = 1103; Match(OPEN_PARENS);
				State = 1104; expression();
				State = 1105; Match(CLOSE_PARENS);
				State = 1106; Match(OPEN_BRACE);
				State = 1110;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1107; switch_section();
					}
					}
					State = 1112;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1113; Match(CLOSE_BRACE);
				}
				break;

			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1115; Match(WHILE);
				State = 1116; Match(OPEN_PARENS);
				State = 1117; expression();
				State = 1118; Match(CLOSE_PARENS);
				State = 1119; embedded_statement();
				}
				break;

			case 6:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1121; Match(DO);
				State = 1122; embedded_statement();
				State = 1123; Match(WHILE);
				State = 1124; Match(OPEN_PARENS);
				State = 1125; expression();
				State = 1126; Match(CLOSE_PARENS);
				State = 1127; Match(SEMICOLON);
				}
				break;

			case 7:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1129; Match(FOR);
				State = 1130; Match(OPEN_PARENS);
				State = 1132;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					State = 1131; for_initializer();
					}
				}

				State = 1134; Match(SEMICOLON);
				State = 1136;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					State = 1135; expression();
					}
				}

				State = 1138; Match(SEMICOLON);
				State = 1140;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					State = 1139; for_iterator();
					}
				}

				State = 1142; Match(CLOSE_PARENS);
				State = 1143; embedded_statement();
				}
				break;

			case 8:
				_localctx = new ForeschStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1144; Match(FOREACH);
				State = 1145; Match(OPEN_PARENS);
				State = 1146; type();
				State = 1147; identifier();
				State = 1148; Match(IN);
				State = 1149; expression();
				State = 1150; Match(CLOSE_PARENS);
				State = 1151; embedded_statement();
				}
				break;

			case 9:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1153; Match(BREAK);
				State = 1154; Match(SEMICOLON);
				}
				break;

			case 10:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1155; Match(CONTINUE);
				State = 1156; Match(SEMICOLON);
				}
				break;

			case 11:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1157; Match(GOTO);
				State = 1162;
				switch (_input.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1158; identifier();
					}
					break;
				case CASE:
					{
					State = 1159; Match(CASE);
					State = 1160; expression();
					}
					break;
				case DEFAULT:
					{
					State = 1161; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1164; Match(SEMICOLON);
				}
				break;

			case 12:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1165; Match(RETURN);
				State = 1167;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					State = 1166; expression();
					}
				}

				State = 1169; Match(SEMICOLON);
				}
				break;

			case 13:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1170; Match(THROW);
				State = 1172;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					State = 1171; expression();
					}
				}

				State = 1174; Match(SEMICOLON);
				}
				break;

			case 14:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1175; Match(TRY);
				State = 1176; block();
				State = 1182;
				switch (_input.La(1)) {
				case CATCH:
					{
					State = 1177; catch_clauses();
					State = 1179;
					_la = _input.La(1);
					if (_la==FINALLY) {
						{
						State = 1178; finally_clause();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 1181; finally_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 15:
				_localctx = new CheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1184; Match(CHECKED);
				State = 1185; block();
				}
				break;

			case 16:
				_localctx = new UncheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1186; Match(UNCHECKED);
				State = 1187; block();
				}
				break;

			case 17:
				_localctx = new LockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1188; Match(LOCK);
				State = 1189; Match(OPEN_PARENS);
				State = 1190; expression();
				State = 1191; Match(CLOSE_PARENS);
				State = 1192; embedded_statement();
				}
				break;

			case 18:
				_localctx = new UsingStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1194; Match(USING);
				State = 1195; Match(OPEN_PARENS);
				State = 1196; resource_acquisition();
				State = 1197; Match(CLOSE_PARENS);
				State = 1198; embedded_statement();
				}
				break;

			case 19:
				_localctx = new YieldStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1200; Match(YIELD);
				State = 1204;
				switch (_input.La(1)) {
				case RETURN:
					{
					State = 1201; Match(RETURN);
					State = 1202; expression();
					}
					break;
				case BREAK:
					{
					State = 1203; Match(BREAK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1206; Match(SEMICOLON);
				}
				break;

			case 20:
				_localctx = new UnsafeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1207; Match(UNSAFE);
				State = 1208; block();
				}
				break;

			case 21:
				_localctx = new FixedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1209; Match(FIXED);
				State = 1210; Match(OPEN_PARENS);
				State = 1211; pointer_type();
				State = 1212; fixed_pointer_declarators();
				State = 1213; Match(CLOSE_PARENS);
				State = 1214; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218; Match(OPEN_BRACE);
			State = 1220;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DO) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << FROM) | (1L << GET) | (1L << GOTO) | (1L << GROUP) | (1L << IF) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LOCK) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (RETURN - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (SWITCH - 65)) | (1L << (THIS - 65)) | (1L << (THROW - 65)) | (1L << (TRUE - 65)) | (1L << (TRY - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (USING - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (WHILE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_BRACE - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (SEMICOLON - 130)) | (1L << (PLUS - 130)) | (1L << (MINUS - 130)) | (1L << (STAR - 130)) | (1L << (AMP - 130)) | (1L << (BANG - 130)) | (1L << (TILDE - 130)) | (1L << (OP_INC - 130)) | (1L << (OP_DEC - 130)))) != 0)) {
				{
				State = 1219; statement_list();
				}
			}

			State = 1222; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_local_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224; type();
			State = 1225; local_variable_declarator();
			State = 1230;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1226; Match(COMMA);
				State = 1227; local_variable_declarator();
				}
				}
				State = 1232;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_local_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233; identifier();
			State = 1236;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1234; Match(ASSIGNMENT);
				State = 1235; local_variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return GetRuleContext<Local_variable_initializer_unsafeContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_local_variable_initializer);
		try {
			State = 1241;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1238; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1239; array_initializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1240; local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(CONST);
			State = 1244; type();
			State = 1245; constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_if_body);
		try {
			State = 1249;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1247; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_switch_section);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1252;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1251; switch_label();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1254;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,118,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1256; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_switch_label);
		try {
			State = 1264;
			switch (_input.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1258; Match(CASE);
				State = 1259; expression();
				State = 1260; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1262; Match(DEFAULT);
				State = 1263; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1266; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1269;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_for_initializer);
		int _la;
		try {
			State = 1280;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1271; local_variable_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1272; expression();
				State = 1277;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1273; Match(COMMA);
					State = 1274; expression();
					}
					}
					State = 1279;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_for_iterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282; expression();
			State = 1287;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1283; Match(COMMA);
				State = 1284; expression();
				}
				}
				State = 1289;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_catch_clauses);
		int _la;
		try {
			int _alt;
			State = 1301;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1290; specific_catch_clause();
				State = 1294;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,124,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1291; specific_catch_clause();
						}
						} 
					}
					State = 1296;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,124,_ctx);
				}
				State = 1298;
				_la = _input.La(1);
				if (_la==CATCH) {
					{
					State = 1297; general_catch_clause();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1300; general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303; Match(CATCH);
			State = 1304; Match(OPEN_PARENS);
			State = 1305; class_type();
			State = 1307;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) {
				{
				State = 1306; identifier();
				}
			}

			State = 1309; Match(CLOSE_PARENS);
			State = 1311;
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 1310; exception_filter();
				}
			}

			State = 1313; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Exception_filterContext exception_filter() {
			return GetRuleContext<Exception_filterContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_general_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315; Match(CATCH);
			State = 1317;
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 1316; exception_filter();
				}
			}

			State = 1319; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_filterContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Exception_filterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterException_filter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitException_filter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_filter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_filterContext exception_filter() {
		Exception_filterContext _localctx = new Exception_filterContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_exception_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1321; Match(WHEN);
			State = 1322; Match(OPEN_PARENS);
			State = 1323; expression();
			State = 1324; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326; Match(FINALLY);
			State = 1327; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_acquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_resource_acquisition);
		try {
			State = 1331;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1329; local_variable_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1330; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333; Match(NAMESPACE);
			State = 1334; _localctx.qi = qualified_identifier();
			State = 1335; namespace_body();
			State = 1337;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 1336; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339; identifier();
			State = 1344;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 1340; Match(DOT);
				State = 1341; identifier();
				}
				}
				State = 1346;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347; Match(OPEN_BRACE);
			State = 1349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				State = 1348; extern_alias_directives();
				}
				break;
			}
			State = 1352;
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 1351; using_directives();
				}
			}

			State = 1355;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 1354; namespace_member_declarations();
				}
			}

			State = 1357; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_extern_alias_directives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1359; extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1362;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364; Match(EXTERN);
			State = 1365; Match(ALIAS);
			State = 1366; identifier();
			State = 1367; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1370;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1369; using_directive();
				}
				}
				State = 1372;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
	 
		public Using_directiveContext() { }
		public virtual void CopyFrom(Using_directiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingAliasDirectiveContext : Using_directiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public UsingAliasDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingAliasDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingAliasDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingAliasDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingNamespaceDirectiveContext : Using_directiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public UsingNamespaceDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingStaticDirectiveContext : Using_directiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public UsingStaticDirectiveContext(Using_directiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStaticDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStaticDirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingStaticDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_using_directive);
		try {
			State = 1389;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				_localctx = new UsingAliasDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1374; Match(USING);
				State = 1375; identifier();
				State = 1376; Match(ASSIGNMENT);
				State = 1377; namespace_or_type_name();
				State = 1378; Match(SEMICOLON);
				}
				break;

			case 2:
				_localctx = new UsingNamespaceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1380; Match(USING);
				State = 1381; namespace_or_type_name();
				State = 1382; Match(SEMICOLON);
				}
				break;

			case 3:
				_localctx = new UsingStaticDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1384; Match(USING);
				State = 1385; Match(STATIC);
				State = 1386; namespace_or_type_name();
				State = 1387; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1391; namespace_member_declaration();
				}
				}
				State = 1394;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_namespace_member_declaration);
		try {
			State = 1398;
			switch (_input.La(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1396; namespace_declaration();
				}
				break;
			case ABSTRACT:
			case ASYNC:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1397; type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1400; attributes();
				}
			}

			State = 1404;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)))) != 0)) {
				{
				State = 1403; all_member_modifiers();
				}
			}

			State = 1411;
			switch (_input.La(1)) {
			case CLASS:
				{
				State = 1406; class_definition();
				}
				break;
			case STRUCT:
				{
				State = 1407; struct_definition();
				}
				break;
			case INTERFACE:
				{
				State = 1408; interface_definition();
				}
				break;
			case ENUM:
				{
				State = 1409; enum_definition();
				}
				break;
			case DELEGATE:
				{
				State = 1410; delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_alias_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413; identifier();
			State = 1414; Match(DOUBLE_COLON);
			State = 1415; identifier();
			State = 1417;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1416; type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419; Match(LT);
			State = 1420; type_parameter();
			State = 1425;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1421; Match(COMMA);
				State = 1422; type_parameter();
				}
				}
				State = 1427;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1428; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1431;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1430; attributes();
				}
			}

			State = 1433; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1435; Match(COLON);
			State = 1436; class_type();
			State = 1441;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1437; Match(COMMA);
				State = 1438; namespace_or_type_name();
				}
				}
				State = 1443;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444; namespace_or_type_name();
			State = 1449;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1445; Match(COMMA);
				State = 1446; namespace_or_type_name();
				}
				}
				State = 1451;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1452; type_parameter_constraints_clause();
				}
				}
				State = 1455;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHERE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; Match(WHERE);
			State = 1458; identifier();
			State = 1459; Match(COLON);
			State = 1460; type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 1472;
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1462; constructor_constraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1463; primary_constraint();
				State = 1466;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					State = 1464; Match(COMMA);
					State = 1465; secondary_constraints();
					}
					break;
				}
				State = 1470;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1468; Match(COMMA);
					State = 1469; constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_primary_constraint);
		try {
			State = 1477;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1474; class_type();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1475; Match(CLASS);
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1476; Match(STRUCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		public Namespace_or_type_nameContext[] namespace_or_type_name() {
			return GetRuleContexts<Namespace_or_type_nameContext>();
		}
		public Namespace_or_type_nameContext namespace_or_type_name(int i) {
			return GetRuleContext<Namespace_or_type_nameContext>(i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1479; namespace_or_type_name();
			State = 1484;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,154,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1480; Match(COMMA);
					State = 1481; namespace_or_type_name();
					}
					} 
				}
				State = 1486;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,154,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487; Match(NEW);
			State = 1488; Match(OPEN_PARENS);
			State = 1489; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491; Match(OPEN_BRACE);
			State = 1493;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE) {
				{
				State = 1492; class_member_declarations();
				}
			}

			State = 1495; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1497; class_member_declaration();
				}
				}
				State = 1500;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public Destructor_definitionContext destructor_definition() {
			return GetRuleContext<Destructor_definitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_class_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1502; attributes();
				}
			}

			State = 1506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 1505; all_member_modifiers();
				}
				break;
			}
			State = 1510;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 1508; common_member_declaration();
				}
				break;
			case TILDE:
				{
				State = 1509; destructor_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_all_member_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1512; all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1515;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,160,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_all_member_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1517;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_common_member_declaration);
		try {
			State = 1538;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1519; constant_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1520; typed_member_declaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1521; event_declaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1522; conversion_operator_declarator();
				State = 1528;
				switch (_input.La(1)) {
				case OPEN_BRACE:
				case SEMICOLON:
					{
					State = 1523; body();
					}
					break;
				case ASSIGNMENT:
					{
					State = 1524; right_arrow();
					State = 1525; expression();
					State = 1526; Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1530; constructor_declaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1531; Match(VOID);
				State = 1532; method_declaration();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1533; class_definition();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1534; struct_definition();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1535; interface_definition();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1536; enum_definition();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1537; delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Indexer_declarationContext indexer_declaration() {
			return GetRuleContext<Indexer_declarationContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Property_declarationContext property_declaration() {
			return GetRuleContext<Property_declarationContext>(0);
		}
		public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		public Field_declarationContext field_declaration() {
			return GetRuleContext<Field_declarationContext>(0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540; type();
			State = 1550;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				State = 1541; namespace_or_type_name();
				State = 1542; Match(DOT);
				State = 1543; indexer_declaration();
				}
				break;

			case 2:
				{
				State = 1545; method_declaration();
				}
				break;

			case 3:
				{
				State = 1546; property_declaration();
				}
				break;

			case 4:
				{
				State = 1547; indexer_declaration();
				}
				break;

			case 5:
				{
				State = 1548; operator_declaration();
				}
				break;

			case 6:
				{
				State = 1549; field_declaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552; constant_declarator();
			State = 1557;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1553; Match(COMMA);
				State = 1554; constant_declarator();
				}
				}
				State = 1559;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1560; identifier();
			State = 1561; Match(ASSIGNMENT);
			State = 1562; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564; variable_declarator();
			State = 1569;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1565; Match(COMMA);
				State = 1566; variable_declarator();
				}
				}
				State = 1571;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1572; identifier();
			State = 1575;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1573; Match(ASSIGNMENT);
				State = 1574; variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_variable_initializer);
		try {
			State = 1579;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1577; expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1578; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_return_type);
		try {
			State = 1583;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1581; type();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1582; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_method_body);
		try {
			State = 1589;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1587; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1588; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_formal_parameter_list);
		int _la;
		try {
			State = 1597;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1591; parameter_array();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1592; fixed_parameters();
				State = 1595;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1593; Match(COMMA);
					State = 1594; parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1599; fixed_parameter();
			State = 1604;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,172,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1600; Match(COMMA);
					State = 1601; fixed_parameter();
					}
					} 
				}
				State = 1606;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,172,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_fixed_parameter);
		int _la;
		try {
			State = 1615;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1608;
				_la = _input.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1607; attributes();
					}
				}

				State = 1611;
				_la = _input.La(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (OUT - 71)) | (1L << (REF - 71)) | (1L << (THIS - 71)))) != 0)) {
					{
					State = 1610; parameter_modifier();
					}
				}

				State = 1613; arg_declaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1614; Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1617;
			_la = _input.La(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (OUT - 71)) | (1L << (REF - 71)) | (1L << (THIS - 71)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1619; attributes();
				}
			}

			State = 1622; Match(PARAMS);
			State = 1623; array_type();
			State = 1624; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1626; _localctx.attrs = attributes();
				}
			}

			State = 1630;
			_la = _input.La(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1629; _localctx.mods = accessor_modifier();
				}
			}

			State = 1642;
			switch (_input.La(1)) {
			case GET:
				{
				State = 1632; Match(GET);
				State = 1633; accessor_body();
				State = 1635;
				_la = _input.La(1);
				if (_la==INTERNAL || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PRIVATE - 75)) | (1L << (PROTECTED - 75)) | (1L << (SET - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
					{
					State = 1634; set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 1637; Match(SET);
				State = 1638; accessor_body();
				State = 1640;
				_la = _input.La(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PRIVATE - 75)) | (1L << (PROTECTED - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
					{
					State = 1639; get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1645;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1644; attributes();
				}
			}

			State = 1648;
			_la = _input.La(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1647; accessor_modifier();
				}
			}

			State = 1650; Match(GET);
			State = 1651; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1653; attributes();
				}
			}

			State = 1657;
			_la = _input.La(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1656; accessor_modifier();
				}
			}

			State = 1659; Match(SET);
			State = 1660; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_accessor_modifier);
		try {
			State = 1669;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1662; Match(PROTECTED);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1663; Match(INTERNAL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1664; Match(PRIVATE);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1665; Match(PROTECTED);
				State = 1666; Match(INTERNAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1667; Match(INTERNAL);
				State = 1668; Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_accessor_body);
		try {
			State = 1673;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1671; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1672; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_accessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_event_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1675; attributes();
				}
			}

			State = 1686;
			switch (_input.La(1)) {
			case ADD:
				{
				State = 1678; Match(ADD);
				State = 1679; block();
				State = 1680; remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				State = 1682; Match(REMOVE);
				State = 1683; block();
				State = 1684; add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1689;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1688; attributes();
				}
			}

			State = 1691; Match(ADD);
			State = 1692; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1694; attributes();
				}
			}

			State = 1697; Match(REMOVE);
			State = 1698; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharpParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharpParser.OP_NE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_overloadable_operator);
		try {
			State = 1722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1700; Match(PLUS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1701; Match(MINUS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1702; Match(BANG);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1703; Match(TILDE);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1704; Match(OP_INC);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1705; Match(OP_DEC);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1706; Match(TRUE);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1707; Match(FALSE);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1708; Match(STAR);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1709; Match(DIV);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1710; Match(PERCENT);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1711; Match(AMP);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1712; Match(BITWISE_OR);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1713; Match(CARET);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1714; Match(OP_LEFT_SHIFT);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1715; right_shift();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1716; Match(OP_EQ);
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1717; Match(OP_NE);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1718; Match(GT);
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1719; Match(LT);
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1720; Match(OP_GE);
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1721; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Arg_declarationContext arg_declaration() {
			return GetRuleContext<Arg_declarationContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_conversion_operator_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1724;
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 1725; Match(OPERATOR);
			State = 1726; type();
			State = 1727; Match(OPEN_PARENS);
			State = 1728; arg_declaration();
			State = 1729; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_constructor_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1731; Match(COLON);
			State = 1732;
			_la = _input.La(1);
			if ( !(_la==BASE || _la==THIS) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 1733; Match(OPEN_PARENS);
			State = 1735;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				State = 1734; argument_list();
				}
			}

			State = 1737; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_body);
		try {
			State = 1741;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1739; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1740; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_interfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743; Match(COLON);
			State = 1744; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Struct_member_declarationContext[] struct_member_declaration() {
			return GetRuleContexts<Struct_member_declarationContext>();
		}
		public Struct_member_declarationContext struct_member_declaration(int i) {
			return GetRuleContext<Struct_member_declarationContext>(i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746; Match(OPEN_BRACE);
			State = 1750;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				State = 1747; struct_member_declaration();
				}
				}
				State = 1752;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1753; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Fixed_size_buffer_declaratorContext[] fixed_size_buffer_declarator() {
			return GetRuleContexts<Fixed_size_buffer_declaratorContext>();
		}
		public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return GetRuleContext<Fixed_size_buffer_declaratorContext>(i);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationContext struct_member_declaration() {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_struct_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1756;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1755; attributes();
				}
			}

			State = 1759;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				State = 1758; all_member_modifiers();
				}
				break;
			}
			State = 1771;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 1761; common_member_declaration();
				}
				break;
			case FIXED:
				{
				State = 1762; Match(FIXED);
				State = 1763; type();
				State = 1765;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1764; fixed_size_buffer_declarator();
					}
					}
					State = 1767;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0) );
				State = 1769; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1773; base_type();
			State = 1781;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1777;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 1774;
					_la = _input.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					}
					State = 1779;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1780; rank_specifier();
				}
				}
				State = 1783;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (OPEN_BRACKET - 123)) | (1L << (STAR - 123)) | (1L << (INTERR - 123)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1785; Match(OPEN_BRACKET);
			State = 1789;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1786; Match(COMMA);
				}
				}
				State = 1791;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1792; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_array_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794; Match(OPEN_BRACE);
			State = 1806;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_BRACE - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				State = 1795; variable_initializer();
				State = 1800;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,203,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1796; Match(COMMA);
						State = 1797; variable_initializer();
						}
						} 
					}
					State = 1802;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,203,_ctx);
				}
				State = 1804;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1803; Match(COMMA);
					}
				}

				}
			}

			State = 1808; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		public Variant_type_parameterContext[] variant_type_parameter() {
			return GetRuleContexts<Variant_type_parameterContext>();
		}
		public Variant_type_parameterContext variant_type_parameter(int i) {
			return GetRuleContext<Variant_type_parameterContext>(i);
		}
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_variant_type_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810; Match(LT);
			State = 1811; variant_type_parameter();
			State = 1816;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1812; Match(COMMA);
				State = 1813; variant_type_parameter();
				}
				}
				State = 1818;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1819; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Variance_annotationContext variance_annotation() {
			return GetRuleContext<Variance_annotationContext>(0);
		}
		public Variant_type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameterContext variant_type_parameter() {
		Variant_type_parameterContext _localctx = new Variant_type_parameterContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_variant_type_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1821; attributes();
				}
			}

			State = 1825;
			_la = _input.La(1);
			if (_la==IN || _la==OUT) {
				{
				State = 1824; variance_annotation();
				}
			}

			State = 1827; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variance_annotationContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariance_annotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariance_annotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariance_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variance_annotationContext variance_annotation() {
		Variance_annotationContext _localctx = new Variance_annotationContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_variance_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829;
			_la = _input.La(1);
			if ( !(_la==IN || _la==OUT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1831; Match(COLON);
			State = 1832; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834; Match(OPEN_BRACE);
			State = 1838;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				State = 1835; interface_member_declaration();
				}
				}
				State = 1840;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1841; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1844;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1843; attributes();
				}
			}

			State = 1847;
			_la = _input.La(1);
			if (_la==NEW) {
				{
				State = 1846; Match(NEW);
				}
			}

			State = 1905;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1850;
				_la = _input.La(1);
				if (_la==UNSAFE) {
					{
					State = 1849; Match(UNSAFE);
					}
				}

				State = 1852; type();
				State = 1880;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					State = 1853; identifier();
					State = 1855;
					_la = _input.La(1);
					if (_la==LT) {
						{
						State = 1854; type_parameter_list();
						}
					}

					State = 1857; Match(OPEN_PARENS);
					State = 1859;
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
						{
						State = 1858; formal_parameter_list();
						}
					}

					State = 1861; Match(CLOSE_PARENS);
					State = 1863;
					_la = _input.La(1);
					if (_la==WHERE) {
						{
						State = 1862; type_parameter_constraints_clauses();
						}
					}

					State = 1865; Match(SEMICOLON);
					}
					break;

				case 2:
					{
					State = 1867; identifier();
					State = 1868; Match(OPEN_BRACE);
					State = 1869; interface_accessors();
					State = 1870; Match(CLOSE_BRACE);
					}
					break;

				case 3:
					{
					State = 1872; Match(THIS);
					State = 1873; Match(OPEN_BRACKET);
					State = 1874; formal_parameter_list();
					State = 1875; Match(CLOSE_BRACKET);
					State = 1876; Match(OPEN_BRACE);
					State = 1877; interface_accessors();
					State = 1878; Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1883;
				_la = _input.La(1);
				if (_la==UNSAFE) {
					{
					State = 1882; Match(UNSAFE);
					}
				}

				State = 1885; Match(VOID);
				State = 1886; identifier();
				State = 1888;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1887; type_parameter_list();
					}
				}

				State = 1890; Match(OPEN_PARENS);
				State = 1892;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
					{
					State = 1891; formal_parameter_list();
					}
				}

				State = 1894; Match(CLOSE_PARENS);
				State = 1896;
				_la = _input.La(1);
				if (_la==WHERE) {
					{
					State = 1895; type_parameter_constraints_clauses();
					}
				}

				State = 1898; Match(SEMICOLON);
				}
				break;

			case 3:
				{
				State = 1900; Match(EVENT);
				State = 1901; type();
				State = 1902; identifier();
				State = 1903; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_accessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1907; attributes();
				}
			}

			State = 1928;
			switch (_input.La(1)) {
			case GET:
				{
				State = 1910; Match(GET);
				State = 1911; Match(SEMICOLON);
				State = 1917;
				_la = _input.La(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 1913;
					_la = _input.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 1912; attributes();
						}
					}

					State = 1915; Match(SET);
					State = 1916; Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 1919; Match(SET);
				State = 1920; Match(SEMICOLON);
				State = 1926;
				_la = _input.La(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 1922;
					_la = _input.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 1921; attributes();
						}
					}

					State = 1924; Match(GET);
					State = 1925; Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1930; Match(COLON);
			State = 1931; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_enum_body);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1933; Match(OPEN_BRACE);
			State = 1945;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (OPEN_BRACKET - 68)))) != 0)) {
				{
				State = 1934; enum_member_declaration();
				State = 1939;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,228,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1935; Match(COMMA);
						State = 1936; enum_member_declaration();
						}
						} 
					}
					State = 1941;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,228,_ctx);
				}
				State = 1943;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 1942; Match(COMMA);
					}
				}

				}
			}

			State = 1947; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1950;
			_la = _input.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1949; attributes();
				}
			}

			State = 1952; identifier();
			State = 1955;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1953; Match(ASSIGNMENT);
				State = 1954; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1957; Match(OPEN_BRACKET);
			State = 1958; global_attribute_target();
			State = 1959; Match(COLON);
			State = 1960; attribute_list();
			State = 1962;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1961; Match(COMMA);
				}
			}

			State = 1964; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_global_attribute_target);
		try {
			State = 1968;
			switch (_input.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1966; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1967; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1970; attribute_section();
				}
				}
				State = 1973;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975; Match(OPEN_BRACKET);
			State = 1979;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				State = 1976; attribute_target();
				State = 1977; Match(COLON);
				}
				break;
			}
			State = 1981; attribute_list();
			State = 1983;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1982; Match(COMMA);
				}
			}

			State = 1985; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_attribute_target);
		try {
			State = 1989;
			switch (_input.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1987; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1988; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1991; attribute();
			State = 1996;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,239,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1992; Match(COMMA);
					State = 1993; attribute();
					}
					} 
				}
				State = 1998;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,239,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Attribute_argumentContext[] attribute_argument() {
			return GetRuleContexts<Attribute_argumentContext>();
		}
		public Attribute_argumentContext attribute_argument(int i) {
			return GetRuleContext<Attribute_argumentContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999; namespace_or_type_name();
			State = 2012;
			_la = _input.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 2000; Match(OPEN_PARENS);
				State = 2009;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
					{
					State = 2001; attribute_argument();
					State = 2006;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2002; Match(COMMA);
						State = 2003; attribute_argument();
						}
						}
						State = 2008;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 2011; Match(CLOSE_PARENS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentContext attribute_argument() {
		Attribute_argumentContext _localctx = new Attribute_argumentContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_attribute_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				State = 2014; identifier();
				State = 2015; Match(COLON);
				}
				break;
			}
			State = 2019; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_pointer_type);
		int _la;
		try {
			State = 2036;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2023;
				switch (_input.La(1)) {
				case BOOL:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SBYTE:
				case SHORT:
				case UINT:
				case ULONG:
				case USHORT:
					{
					State = 2021; simple_type();
					}
					break;
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case STRING:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2022; class_type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2029;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 2027;
					switch (_input.La(1)) {
					case OPEN_BRACKET:
						{
						State = 2025; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 2026; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2031;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2032; Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2034; Match(VOID);
				State = 2035; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorsContext : ParserRuleContext {
		public Fixed_pointer_declaratorContext[] fixed_pointer_declarator() {
			return GetRuleContexts<Fixed_pointer_declaratorContext>();
		}
		public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return GetRuleContext<Fixed_pointer_declaratorContext>(i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_fixed_pointer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2038; fixed_pointer_declarator();
			State = 2043;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2039; Match(COMMA);
				State = 2040; fixed_pointer_declarator();
				}
				}
				State = 2045;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return GetRuleContext<Fixed_pointer_initializerContext>(0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorContext fixed_pointer_declarator() {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_fixed_pointer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046; identifier();
			State = 2047; Match(ASSIGNMENT);
			State = 2048; fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return GetRuleContext<Local_variable_initializer_unsafeContext>(0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_pointer_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_pointer_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_initializerContext fixed_pointer_initializer() {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_fixed_pointer_initializer);
		try {
			State = 2055;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2051;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					State = 2050; Match(AMP);
					}
					break;
				}
				State = 2053; expression();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2054; local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_fixed_size_buffer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057; identifier();
			State = 2058; Match(OPEN_BRACKET);
			State = 2059; expression();
			State = 2060; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializer_unsafeContext : ParserRuleContext {
		public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Local_variable_initializer_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
		Local_variable_initializer_unsafeContext _localctx = new Local_variable_initializer_unsafeContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_local_variable_initializer_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2062; Match(STACKALLOC);
			State = 2063; type();
			State = 2064; Match(OPEN_BRACKET);
			State = 2065; expression();
			State = 2066; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068; _localctx.first = Match(ASSIGNMENT);
			State = 2069; _localctx.second = Match(GT);
			State = 2070;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072; _localctx.first = Match(GT);
			State = 2073; _localctx.second = Match(GT);
			State = 2074;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2076; _localctx.first = Match(GT);
			State = 2077; _localctx.second = Match(OP_GE);
			State = 2078;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(CSharpParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(CSharpParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(CSharpParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(CSharpParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(CSharpParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_literal);
		try {
			State = 2087;
			switch (_input.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2080; boolean_literal();
				}
				break;
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2081; string_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2082; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2083; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2084; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2085; Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2086; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089;
			_la = _input.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public Interpolated_regular_stringContext interpolated_regular_string() {
			return GetRuleContext<Interpolated_regular_stringContext>(0);
		}
		public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
			return GetRuleContext<Interpolated_verbatium_stringContext>(0);
		}
		public ITerminalNode REGULAR_STRING() { return GetToken(CSharpParser.REGULAR_STRING, 0); }
		public ITerminalNode VERBATIUM_STRING() { return GetToken(CSharpParser.VERBATIUM_STRING, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_string_literal);
		try {
			State = 2095;
			switch (_input.La(1)) {
			case INTERPOLATED_REGULAR_STRING_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2091; interpolated_regular_string();
				}
				break;
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2092; interpolated_verbatium_string();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2093; Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2094; Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_stringContext : ParserRuleContext {
		public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public Interpolated_regular_string_partContext[] interpolated_regular_string_part() {
			return GetRuleContexts<Interpolated_regular_string_partContext>();
		}
		public Interpolated_regular_string_partContext interpolated_regular_string_part(int i) {
			return GetRuleContext<Interpolated_regular_string_partContext>(i);
		}
		public Interpolated_regular_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_stringContext interpolated_regular_string() {
		Interpolated_regular_stringContext _localctx = new Interpolated_regular_stringContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_interpolated_regular_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2097; Match(INTERPOLATED_REGULAR_STRING_START);
			State = 2101;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)) | (1L << (DOUBLE_CURLY_INSIDE - 131)) | (1L << (REGULAR_CHAR_INSIDE - 131)) | (1L << (REGULAR_STRING_INSIDE - 131)))) != 0)) {
				{
				{
				State = 2098; interpolated_regular_string_part();
				}
				}
				State = 2103;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2104; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_stringContext : ParserRuleContext {
		public ITerminalNode INTERPOLATED_VERBATIUM_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0); }
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public Interpolated_verbatium_string_partContext[] interpolated_verbatium_string_part() {
			return GetRuleContexts<Interpolated_verbatium_string_partContext>();
		}
		public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part(int i) {
			return GetRuleContext<Interpolated_verbatium_string_partContext>(i);
		}
		public Interpolated_verbatium_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_stringContext interpolated_verbatium_string() {
		Interpolated_verbatium_stringContext _localctx = new Interpolated_verbatium_stringContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_interpolated_verbatium_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106; Match(INTERPOLATED_VERBATIUM_STRING_START);
			State = 2110;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)) | (1L << (DOUBLE_CURLY_INSIDE - 131)) | (1L << (VERBATIUM_DOUBLE_QUOTE_INSIDE - 131)) | (1L << (VERBATIUM_INSIDE_STRING - 131)))) != 0)) {
				{
				{
				State = 2107; interpolated_verbatium_string_part();
				}
				}
				State = 2112;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2113; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_regular_string_partContext : ParserRuleContext {
		public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public ITerminalNode REGULAR_CHAR_INSIDE() { return GetToken(CSharpParser.REGULAR_CHAR_INSIDE, 0); }
		public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(CSharpParser.REGULAR_STRING_INSIDE, 0); }
		public Interpolated_regular_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_regular_string_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_regular_string_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_regular_string_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_regular_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_regular_string_partContext interpolated_regular_string_part() {
		Interpolated_regular_string_partContext _localctx = new Interpolated_regular_string_partContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_interpolated_regular_string_part);
		try {
			State = 2119;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2115; interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2116; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case REGULAR_CHAR_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2117; Match(REGULAR_CHAR_INSIDE);
				}
				break;
			case REGULAR_STRING_INSIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2118; Match(REGULAR_STRING_INSIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_verbatium_string_partContext : ParserRuleContext {
		public Interpolated_string_expressionContext interpolated_string_expression() {
			return GetRuleContext<Interpolated_string_expressionContext>(0);
		}
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public ITerminalNode VERBATIUM_DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0); }
		public ITerminalNode VERBATIUM_INSIDE_STRING() { return GetToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0); }
		public Interpolated_verbatium_string_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_verbatium_string_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_verbatium_string_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_verbatium_string_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_verbatium_string_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_verbatium_string_partContext interpolated_verbatium_string_part() {
		Interpolated_verbatium_string_partContext _localctx = new Interpolated_verbatium_string_partContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_interpolated_verbatium_string_part);
		try {
			State = 2125;
			switch (_input.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2121; interpolated_string_expression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2122; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case VERBATIUM_DOUBLE_QUOTE_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2123; Match(VERBATIUM_DOUBLE_QUOTE_INSIDE);
				}
				break;
			case VERBATIUM_INSIDE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2124; Match(VERBATIUM_INSIDE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interpolated_string_expressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] FORMAT_STRING() { return GetTokens(CSharpParser.FORMAT_STRING); }
		public ITerminalNode FORMAT_STRING(int i) {
			return GetToken(CSharpParser.FORMAT_STRING, i);
		}
		public Interpolated_string_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolated_string_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolated_string_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolated_string_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolated_string_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interpolated_string_expressionContext interpolated_string_expression() {
		Interpolated_string_expressionContext _localctx = new Interpolated_string_expressionContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_interpolated_string_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2127; expression();
			State = 2132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2128; Match(COMMA);
				State = 2129; expression();
				}
				}
				State = 2134;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2141;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2135; Match(COLON);
				State = 2137;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 2136; Match(FORMAT_STRING);
					}
					}
					State = 2139;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==FORMAT_STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		public ITerminalNode AS() { return GetToken(CSharpParser.AS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode IS() { return GetToken(CSharpParser.IS, 0); }
		public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode NULL() { return GetToken(CSharpParser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2143;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARAMS - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STACKALLOC - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHILE - 64)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145; Match(CLASS);
			State = 2146; identifier();
			State = 2148;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2147; type_parameter_list();
				}
			}

			State = 2151;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2150; class_base();
				}
			}

			State = 2154;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2153; type_parameter_constraints_clauses();
				}
			}

			State = 2156; class_body();
			State = 2158;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2157; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160; Match(STRUCT);
			State = 2161; identifier();
			State = 2163;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2162; type_parameter_list();
				}
			}

			State = 2166;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2165; struct_interfaces();
				}
			}

			State = 2169;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2168; type_parameter_constraints_clauses();
				}
			}

			State = 2171; struct_body();
			State = 2173;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2172; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2175; Match(INTERFACE);
			State = 2176; identifier();
			State = 2178;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2177; variant_type_parameter_list();
				}
			}

			State = 2181;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2180; interface_base();
				}
			}

			State = 2184;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2183; type_parameter_constraints_clauses();
				}
			}

			State = 2186; interface_body();
			State = 2188;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2187; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190; Match(ENUM);
			State = 2191; identifier();
			State = 2193;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2192; enum_base();
				}
			}

			State = 2195; enum_body();
			State = 2197;
			_la = _input.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2196; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2199; Match(DELEGATE);
			State = 2200; return_type();
			State = 2201; identifier();
			State = 2203;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2202; variant_type_parameter_list();
				}
			}

			State = 2205; Match(OPEN_PARENS);
			State = 2207;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				State = 2206; formal_parameter_list();
				}
			}

			State = 2209; Match(CLOSE_PARENS);
			State = 2211;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2210; type_parameter_constraints_clauses();
				}
			}

			State = 2213; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_event_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2215; Match(EVENT);
			State = 2216; type();
			State = 2225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				State = 2217; variable_declarators();
				State = 2218; Match(SEMICOLON);
				}
				break;

			case 2:
				{
				State = 2220; member_name();
				State = 2221; Match(OPEN_BRACE);
				State = 2222; event_accessor_declarations();
				State = 2223; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_field_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2227; variable_declarators();
			State = 2228; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2230; member_name();
			State = 2244;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				{
				State = 2231; Match(OPEN_BRACE);
				State = 2232; accessor_declarations();
				State = 2233; Match(CLOSE_BRACE);
				State = 2238;
				_la = _input.La(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2234; Match(ASSIGNMENT);
					State = 2235; variable_initializer();
					State = 2236; Match(SEMICOLON);
					}
				}

				}
				break;
			case ASSIGNMENT:
				{
				State = 2240; right_arrow();
				State = 2241; expression();
				State = 2242; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246; Match(CONST);
			State = 2247; type();
			State = 2248; constant_declarators();
			State = 2249; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declarationContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declarationContext indexer_declaration() {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_indexer_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2251; Match(THIS);
			State = 2252; Match(OPEN_BRACKET);
			State = 2253; formal_parameter_list();
			State = 2254; Match(CLOSE_BRACKET);
			State = 2263;
			switch (_input.La(1)) {
			case OPEN_BRACE:
				{
				State = 2255; Match(OPEN_BRACE);
				State = 2256; accessor_declarations();
				State = 2257; Match(CLOSE_BRACE);
				}
				break;
			case ASSIGNMENT:
				{
				State = 2259; right_arrow();
				State = 2260; expression();
				State = 2261; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2265; Match(TILDE);
			State = 2266; identifier();
			State = 2267; Match(OPEN_PARENS);
			State = 2268; Match(CLOSE_PARENS);
			State = 2269; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2271; identifier();
			State = 2272; Match(OPEN_PARENS);
			State = 2274;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				State = 2273; formal_parameter_list();
				}
			}

			State = 2276; Match(CLOSE_PARENS);
			State = 2278;
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 2277; constructor_initializer();
				}
			}

			State = 2280; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282; method_member_name();
			State = 2284;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2283; type_parameter_list();
				}
			}

			State = 2286; Match(OPEN_PARENS);
			State = 2288;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)))) != 0)) {
				{
				State = 2287; formal_parameter_list();
				}
			}

			State = 2290; Match(CLOSE_PARENS);
			State = 2292;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 2291; type_parameter_constraints_clauses();
				}
			}

			State = 2299;
			switch (_input.La(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2294; method_body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2295; right_arrow();
				State = 2296; expression();
				State = 2297; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_listContext[] type_argument_list() {
			return GetRuleContexts<Type_argument_listContext>();
		}
		public Type_argument_listContext type_argument_list(int i) {
			return GetRuleContext<Type_argument_listContext>(i);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_method_member_name);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2306;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				State = 2301; identifier();
				}
				break;

			case 2:
				{
				State = 2302; identifier();
				State = 2303; Match(DOUBLE_COLON);
				State = 2304; identifier();
				}
				break;
			}
			State = 2315;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,289,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2309;
					_la = _input.La(1);
					if (_la==LT) {
						{
						State = 2308; type_argument_list();
						}
					}

					State = 2311; Match(DOT);
					State = 2312; identifier();
					}
					} 
				}
				State = 2317;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,289,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public Arg_declarationContext[] arg_declaration() {
			return GetRuleContexts<Arg_declarationContext>();
		}
		public Arg_declarationContext arg_declaration(int i) {
			return GetRuleContext<Arg_declarationContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2318; Match(OPERATOR);
			State = 2319; overloadable_operator();
			State = 2320; Match(OPEN_PARENS);
			State = 2321; arg_declaration();
			State = 2324;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 2322; Match(COMMA);
				State = 2323; arg_declaration();
				}
			}

			State = 2326; Match(CLOSE_PARENS);
			State = 2332;
			switch (_input.La(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2327; body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2328; right_arrow();
				State = 2329; expression();
				State = 2330; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Arg_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArg_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArg_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arg_declarationContext arg_declaration() {
		Arg_declarationContext _localctx = new Arg_declarationContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_arg_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334; type();
			State = 2335; identifier();
			State = 2338;
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2336; Match(ASSIGNMENT);
				State = 2337; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2340; Match(OPEN_PARENS);
			State = 2342;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				State = 2341; argument_list();
				}
			}

			State = 2344; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2346; Match(OPEN_PARENS);
			State = 2348;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (USHORT - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PLUS - 131)) | (1L << (MINUS - 131)) | (1L << (STAR - 131)) | (1L << (AMP - 131)) | (1L << (BANG - 131)) | (1L << (TILDE - 131)) | (1L << (OP_INC - 131)) | (1L << (OP_DEC - 131)))) != 0)) {
				{
				State = 2347; argument_list();
				}
			}

			State = 2350; Match(CLOSE_PARENS);
			State = 2352;
			_la = _input.La(1);
			if (_la==OPEN_BRACE) {
				{
				State = 2351; object_or_collection_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpParserVisitor<TResult> typedVisitor = visitor as ICSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 169: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);

		case 170: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);

		case 171: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xC1\x937\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x3\x2\x5\x2\x194\n\x2\x3\x2\x5\x2\x197\n\x2\x3\x2\x5\x2\x19A\n\x2\x3"+
		"\x2\a\x2\x19D\n\x2\f\x2\xE\x2\x1A0\v\x2\x3\x2\x5\x2\x1A3\n\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x5\x3\x1A9\n\x3\x3\x3\x5\x3\x1AC\n\x3\x3\x3\x3\x3\x3\x3"+
		"\x5\x3\x1B1\n\x3\a\x3\x1B3\n\x3\f\x3\xE\x3\x1B6\v\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\a\x4\x1BC\n\x4\f\x4\xE\x4\x1BF\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5"+
		"\x5\x1C5\n\x5\x3\x6\x3\x6\x5\x6\x1C9\n\x6\x3\a\x3\a\x3\a\x5\a\x1CE\n\a"+
		"\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n\x1D8\n\n\x3\v\x3\v\x3\v"+
		"\x3\v\a\v\x1DE\n\v\f\v\xE\v\x1E1\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\x1E8"+
		"\n\f\f\f\xE\f\x1EB\v\f\x3\r\x3\r\x3\r\x5\r\x1F0\n\r\x3\r\x5\r\x1F3\n\r"+
		"\x3\r\x3\r\x3\xE\x3\xE\x5\xE\x1F9\n\xE\x3\xF\x3\xF\x3\xF\x5\xF\x1FE\n"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x20F\n\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x217\n\x12\x3\x13\x3\x13\x3\x13\x5"+
		"\x13\x21C\n\x13\x3\x14\x3\x14\x3\x14\a\x14\x221\n\x14\f\x14\xE\x14\x224"+
		"\v\x14\x3\x15\x3\x15\x3\x15\a\x15\x229\n\x15\f\x15\xE\x15\x22C\v\x15\x3"+
		"\x16\x3\x16\x3\x16\a\x16\x231\n\x16\f\x16\xE\x16\x234\v\x16\x3\x17\x3"+
		"\x17\x3\x17\a\x17\x239\n\x17\f\x17\xE\x17\x23C\v\x17\x3\x18\x3\x18\x3"+
		"\x18\a\x18\x241\n\x18\f\x18\xE\x18\x244\v\x18\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x249\n\x19\f\x19\xE\x19\x24C\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\a\x1A\x255\n\x1A\f\x1A\xE\x1A\x258\v\x1A\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x25D\n\x1B\x3\x1B\a\x1B\x260\n\x1B\f\x1B\xE\x1B\x263\v"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\a\x1C\x268\n\x1C\f\x1C\xE\x1C\x26B\v\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\a\x1D\x270\n\x1D\f\x1D\xE\x1D\x273\v\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x28D\n\x1E\x3\x1F\x3\x1F\a\x1F\x291\n\x1F\f"+
		"\x1F\xE\x1F\x294\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x29C\n\x1F\x3\x1F\a\x1F\x29F\n\x1F\f\x1F\xE\x1F\x2A2\v\x1F\a\x1F\x2A4"+
		"\n\x1F\f\x1F\xE\x1F\x2A7\v\x1F\x3 \x3 \x3 \x5 \x2AC\n \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x2BA\n \x3 \x3 \x3 \x3 \x5 \x2C0"+
		"\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x2CA\n \f \xE \x2CD\v \x3 \x5 "+
		"\x2D0\n \x3 \x6 \x2D3\n \r \xE \x2D4\x3 \x3 \x5 \x2D9\n \x3 \x3 \x3 \x3"+
		" \x5 \x2DF\n \x3 \x3 \x3 \x3 \x3 \x5 \x2E6\n \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x2F9\n \x3 \x3 \x3 \x5"+
		" \x2FE\n \x3 \x5 \x301\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\a \x30E\n \f \xE \x311\v \x3 \x3 \x3 \x5 \x316\n \x3!\x5!\x319\n!\x3"+
		"!\x3!\x3!\x5!\x31E\n!\x3\"\x5\"\x321\n\"\x3\"\x3\"\x3\"\x3\"\a\"\x327"+
		"\n\"\f\"\xE\"\x32A\v\"\x3\"\x3\"\x3#\x3#\x3#\x5#\x331\n#\x3#\x3#\x3$\x3"+
		"$\x3%\x3%\x3%\a%\x33A\n%\f%\xE%\x33D\v%\x3&\x3&\x5&\x341\n&\x3\'\x3\'"+
		"\x3\'\x5\'\x346\n\'\x5\'\x348\n\'\x3\'\x3\'\x3(\x3(\x3(\a(\x34F\n(\f("+
		"\xE(\x352\v(\x3)\x3)\x3)\x3)\x3)\x5)\x359\n)\x3)\x3)\x3)\x3*\x3*\x5*\x360"+
		"\n*\x3+\x3+\x3+\x3+\a+\x366\n+\f+\xE+\x369\v+\x3+\x5+\x36C\n+\x3+\x3+"+
		"\x3,\x3,\x3,\x3,\x3,\x5,\x375\n,\x3-\x3-\x3-\x5-\x37A\n-\x5-\x37C\n-\x3"+
		"-\x3-\x3.\x3.\x3.\a.\x383\n.\f.\xE.\x386\v.\x3/\x3/\x3/\x3/\x3/\x5/\x38D"+
		"\n/\x3\x30\x3\x30\x5\x30\x391\n\x30\x3\x30\x3\x30\x3\x30\x5\x30\x396\n"+
		"\x30\x5\x30\x398\n\x30\x3\x30\x3\x30\x3\x30\x5\x30\x39D\n\x30\a\x30\x39F"+
		"\n\x30\f\x30\xE\x30\x3A2\v\x30\x3\x31\x3\x31\a\x31\x3A6\n\x31\f\x31\xE"+
		"\x31\x3A9\v\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\a\x32\x3B0\n\x32\f"+
		"\x32\xE\x32\x3B3\v\x32\x3\x32\x5\x32\x3B6\n\x32\x3\x33\x5\x33\x3B9\n\x33"+
		"\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x3CA\n\x34\x3\x35\x3\x35\x3"+
		"\x35\a\x35\x3CF\n\x35\f\x35\xE\x35\x3D2\v\x35\x3\x36\x5\x36\x3D5\n\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\a\x37\x3DD\n\x37\f\x37\xE\x37"+
		"\x3E0\v\x37\x3\x38\x3\x38\x5\x38\x3E4\n\x38\x3\x39\x3\x39\x3\x39\x3:\x3"+
		":\x5:\x3EB\n:\x3:\x3:\x3:\x3:\x3;\a;\x3F2\n;\f;\xE;\x3F5\v;\x3;\x3;\x5"+
		";\x3F9\n;\x3<\x3<\x3<\x3<\x3<\x5<\x400\n<\x3=\x3=\x3=\x3=\x3=\x3>\x3>"+
		"\x3>\x3?\x3?\x5?\x40C\n?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x417"+
		"\n?\x3@\x3@\x3@\x3@\a@\x41D\n@\f@\xE@\x420\v@\x3\x41\x3\x41\x5\x41\x424"+
		"\n\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x42D\n"+
		"\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x5\x44\x439\n\x44\x3\x44\x3\x44\x3\x44\x5\x44\x43E\n\x44\x3\x45\x3"+
		"\x45\x5\x45\x442\n\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x44F\n\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\a\x46\x457\n\x46\f\x46\xE\x46\x45A\v\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x46F\n\x46"+
		"\x3\x46\x3\x46\x5\x46\x473\n\x46\x3\x46\x3\x46\x5\x46\x477\n\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46"+
		"\x48D\n\x46\x3\x46\x3\x46\x3\x46\x5\x46\x492\n\x46\x3\x46\x3\x46\x3\x46"+
		"\x5\x46\x497\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x49E\n\x46"+
		"\x3\x46\x5\x46\x4A1\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3\x46\x5\x46\x4B7\n\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x4C3\n\x46\x3G\x3G\x5"+
		"G\x4C7\nG\x3G\x3G\x3H\x3H\x3H\x3H\aH\x4CF\nH\fH\xEH\x4D2\vH\x3I\x3I\x3"+
		"I\x5I\x4D7\nI\x3J\x3J\x3J\x5J\x4DC\nJ\x3K\x3K\x3K\x3K\x3L\x3L\x5L\x4E4"+
		"\nL\x3M\x6M\x4E7\nM\rM\xEM\x4E8\x3M\x3M\x3N\x3N\x3N\x3N\x3N\x3N\x5N\x4F3"+
		"\nN\x3O\x6O\x4F6\nO\rO\xEO\x4F7\x3P\x3P\x3P\x3P\aP\x4FE\nP\fP\xEP\x501"+
		"\vP\x5P\x503\nP\x3Q\x3Q\x3Q\aQ\x508\nQ\fQ\xEQ\x50B\vQ\x3R\x3R\aR\x50F"+
		"\nR\fR\xER\x512\vR\x3R\x5R\x515\nR\x3R\x5R\x518\nR\x3S\x3S\x3S\x3S\x5"+
		"S\x51E\nS\x3S\x3S\x5S\x522\nS\x3S\x3S\x3T\x3T\x5T\x528\nT\x3T\x3T\x3U"+
		"\x3U\x3U\x3U\x3U\x3V\x3V\x3V\x3W\x3W\x5W\x536\nW\x3X\x3X\x3X\x3X\x5X\x53C"+
		"\nX\x3Y\x3Y\x3Y\aY\x541\nY\fY\xEY\x544\vY\x3Z\x3Z\x5Z\x548\nZ\x3Z\x5Z"+
		"\x54B\nZ\x3Z\x5Z\x54E\nZ\x3Z\x3Z\x3[\x6[\x553\n[\r[\xE[\x554\x3\\\x3\\"+
		"\x3\\\x3\\\x3\\\x3]\x6]\x55D\n]\r]\xE]\x55E\x3^\x3^\x3^\x3^\x3^\x3^\x3"+
		"^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x570\n^\x3_\x6_\x573\n_\r_\xE_\x574"+
		"\x3`\x3`\x5`\x579\n`\x3\x61\x5\x61\x57C\n\x61\x3\x61\x5\x61\x57F\n\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x586\n\x61\x3\x62\x3\x62\x3"+
		"\x62\x3\x62\x5\x62\x58C\n\x62\x3\x63\x3\x63\x3\x63\x3\x63\a\x63\x592\n"+
		"\x63\f\x63\xE\x63\x595\v\x63\x3\x63\x3\x63\x3\x64\x5\x64\x59A\n\x64\x3"+
		"\x64\x3\x64\x3\x65\x3\x65\x3\x65\x3\x65\a\x65\x5A2\n\x65\f\x65\xE\x65"+
		"\x5A5\v\x65\x3\x66\x3\x66\x3\x66\a\x66\x5AA\n\x66\f\x66\xE\x66\x5AD\v"+
		"\x66\x3g\x6g\x5B0\ng\rg\xEg\x5B1\x3h\x3h\x3h\x3h\x3h\x3i\x3i\x3i\x3i\x5"+
		"i\x5BD\ni\x3i\x3i\x5i\x5C1\ni\x5i\x5C3\ni\x3j\x3j\x3j\x5j\x5C8\nj\x3k"+
		"\x3k\x3k\ak\x5CD\nk\fk\xEk\x5D0\vk\x3l\x3l\x3l\x3l\x3m\x3m\x5m\x5D8\n"+
		"m\x3m\x3m\x3n\x6n\x5DD\nn\rn\xEn\x5DE\x3o\x5o\x5E2\no\x3o\x5o\x5E5\no"+
		"\x3o\x3o\x5o\x5E9\no\x3p\x6p\x5EC\np\rp\xEp\x5ED\x3q\x3q\x3r\x3r\x3r\x3"+
		"r\x3r\x3r\x3r\x3r\x3r\x5r\x5FB\nr\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x3r\x5r"+
		"\x605\nr\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x3s\x5s\x611\ns\x3t\x3t\x3"+
		"t\at\x616\nt\ft\xEt\x619\vt\x3u\x3u\x3u\x3u\x3v\x3v\x3v\av\x622\nv\fv"+
		"\xEv\x625\vv\x3w\x3w\x3w\x5w\x62A\nw\x3x\x3x\x5x\x62E\nx\x3y\x3y\x5y\x632"+
		"\ny\x3z\x3z\x3{\x3{\x5{\x638\n{\x3|\x3|\x3|\x3|\x5|\x63E\n|\x5|\x640\n"+
		"|\x3}\x3}\x3}\a}\x645\n}\f}\xE}\x648\v}\x3~\x5~\x64B\n~\x3~\x5~\x64E\n"+
		"~\x3~\x3~\x5~\x652\n~\x3\x7F\x3\x7F\x3\x80\x5\x80\x657\n\x80\x3\x80\x3"+
		"\x80\x3\x80\x3\x80\x3\x81\x5\x81\x65E\n\x81\x3\x81\x5\x81\x661\n\x81\x3"+
		"\x81\x3\x81\x3\x81\x5\x81\x666\n\x81\x3\x81\x3\x81\x3\x81\x5\x81\x66B"+
		"\n\x81\x5\x81\x66D\n\x81\x3\x82\x5\x82\x670\n\x82\x3\x82\x5\x82\x673\n"+
		"\x82\x3\x82\x3\x82\x3\x82\x3\x83\x5\x83\x679\n\x83\x3\x83\x5\x83\x67C"+
		"\n\x83\x3\x83\x3\x83\x3\x83\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84"+
		"\x3\x84\x5\x84\x688\n\x84\x3\x85\x3\x85\x5\x85\x68C\n\x85\x3\x86\x5\x86"+
		"\x68F\n\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5"+
		"\x86\x699\n\x86\x3\x87\x5\x87\x69C\n\x87\x3\x87\x3\x87\x3\x87\x3\x88\x5"+
		"\x88\x6A2\n\x88\x3\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x3\x89\x5\x89\x6BD\n\x89\x3"+
		"\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3"+
		"\x8B\x5\x8B\x6CA\n\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x5\x8C\x6D0\n\x8C\x3"+
		"\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\a\x8E\x6D7\n\x8E\f\x8E\xE\x8E\x6DA\v"+
		"\x8E\x3\x8E\x3\x8E\x3\x8F\x5\x8F\x6DF\n\x8F\x3\x8F\x5\x8F\x6E2\n\x8F\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x6\x8F\x6E8\n\x8F\r\x8F\xE\x8F\x6E9\x3\x8F\x3"+
		"\x8F\x5\x8F\x6EE\n\x8F\x3\x90\x3\x90\a\x90\x6F2\n\x90\f\x90\xE\x90\x6F5"+
		"\v\x90\x3\x90\x6\x90\x6F8\n\x90\r\x90\xE\x90\x6F9\x3\x91\x3\x91\a\x91"+
		"\x6FE\n\x91\f\x91\xE\x91\x701\v\x91\x3\x91\x3\x91\x3\x92\x3\x92\x3\x92"+
		"\x3\x92\a\x92\x709\n\x92\f\x92\xE\x92\x70C\v\x92\x3\x92\x5\x92\x70F\n"+
		"\x92\x5\x92\x711\n\x92\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x3\x93\a\x93"+
		"\x719\n\x93\f\x93\xE\x93\x71C\v\x93\x3\x93\x3\x93\x3\x94\x5\x94\x721\n"+
		"\x94\x3\x94\x5\x94\x724\n\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x96\x3\x96"+
		"\x3\x96\x3\x97\x3\x97\a\x97\x72F\n\x97\f\x97\xE\x97\x732\v\x97\x3\x97"+
		"\x3\x97\x3\x98\x5\x98\x737\n\x98\x3\x98\x5\x98\x73A\n\x98\x3\x98\x5\x98"+
		"\x73D\n\x98\x3\x98\x3\x98\x3\x98\x5\x98\x742\n\x98\x3\x98\x3\x98\x5\x98"+
		"\x746\n\x98\x3\x98\x3\x98\x5\x98\x74A\n\x98\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x5\x98\x75B\n\x98\x3\x98\x5\x98\x75E\n\x98\x3\x98\x3\x98\x3\x98"+
		"\x5\x98\x763\n\x98\x3\x98\x3\x98\x5\x98\x767\n\x98\x3\x98\x3\x98\x5\x98"+
		"\x76B\n\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\x774"+
		"\n\x98\x3\x99\x5\x99\x777\n\x99\x3\x99\x3\x99\x3\x99\x5\x99\x77C\n\x99"+
		"\x3\x99\x3\x99\x5\x99\x780\n\x99\x3\x99\x3\x99\x3\x99\x5\x99\x785\n\x99"+
		"\x3\x99\x3\x99\x5\x99\x789\n\x99\x5\x99\x78B\n\x99\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9B\x3\x9B\x3\x9B\x3\x9B\a\x9B\x794\n\x9B\f\x9B\xE\x9B\x797\v\x9B"+
		"\x3\x9B\x5\x9B\x79A\n\x9B\x5\x9B\x79C\n\x9B\x3\x9B\x3\x9B\x3\x9C\x5\x9C"+
		"\x7A1\n\x9C\x3\x9C\x3\x9C\x3\x9C\x5\x9C\x7A6\n\x9C\x3\x9D\x3\x9D\x3\x9D"+
		"\x3\x9D\x3\x9D\x5\x9D\x7AD\n\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x5\x9E\x7B3"+
		"\n\x9E\x3\x9F\x6\x9F\x7B6\n\x9F\r\x9F\xE\x9F\x7B7\x3\xA0\x3\xA0\x3\xA0"+
		"\x3\xA0\x5\xA0\x7BE\n\xA0\x3\xA0\x3\xA0\x5\xA0\x7C2\n\xA0\x3\xA0\x3\xA0"+
		"\x3\xA1\x3\xA1\x5\xA1\x7C8\n\xA1\x3\xA2\x3\xA2\x3\xA2\a\xA2\x7CD\n\xA2"+
		"\f\xA2\xE\xA2\x7D0\v\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\a\xA3\x7D7"+
		"\n\xA3\f\xA3\xE\xA3\x7DA\v\xA3\x5\xA3\x7DC\n\xA3\x3\xA3\x5\xA3\x7DF\n"+
		"\xA3\x3\xA4\x3\xA4\x3\xA4\x5\xA4\x7E4\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5"+
		"\x5\xA5\x7EA\n\xA5\x3\xA5\x3\xA5\a\xA5\x7EE\n\xA5\f\xA5\xE\xA5\x7F1\v"+
		"\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\x7F7\n\xA5\x3\xA6\x3\xA6\x3\xA6"+
		"\a\xA6\x7FC\n\xA6\f\xA6\xE\xA6\x7FF\v\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\x3\xA8\x5\xA8\x806\n\xA8\x3\xA8\x3\xA8\x5\xA8\x80A\n\xA8\x3\xA9\x3\xA9"+
		"\x3\xA9\x3\xA9\x3\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAB"+
		"\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAD"+
		"\x3\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\x82A\n"+
		"\xAE\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x5\xB0\x832\n\xB0\x3\xB1"+
		"\x3\xB1\a\xB1\x836\n\xB1\f\xB1\xE\xB1\x839\v\xB1\x3\xB1\x3\xB1\x3\xB2"+
		"\x3\xB2\a\xB2\x83F\n\xB2\f\xB2\xE\xB2\x842\v\xB2\x3\xB2\x3\xB2\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x84A\n\xB3\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5"+
		"\xB4\x850\n\xB4\x3\xB5\x3\xB5\x3\xB5\a\xB5\x855\n\xB5\f\xB5\xE\xB5\x858"+
		"\v\xB5\x3\xB5\x3\xB5\x6\xB5\x85C\n\xB5\r\xB5\xE\xB5\x85D\x5\xB5\x860\n"+
		"\xB5\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3\xB7\x5\xB7\x867\n\xB7\x3\xB7\x5\xB7"+
		"\x86A\n\xB7\x3\xB7\x5\xB7\x86D\n\xB7\x3\xB7\x3\xB7\x5\xB7\x871\n\xB7\x3"+
		"\xB8\x3\xB8\x3\xB8\x5\xB8\x876\n\xB8\x3\xB8\x5\xB8\x879\n\xB8\x3\xB8\x5"+
		"\xB8\x87C\n\xB8\x3\xB8\x3\xB8\x5\xB8\x880\n\xB8\x3\xB9\x3\xB9\x3\xB9\x5"+
		"\xB9\x885\n\xB9\x3\xB9\x5\xB9\x888\n\xB9\x3\xB9\x5\xB9\x88B\n\xB9\x3\xB9"+
		"\x3\xB9\x5\xB9\x88F\n\xB9\x3\xBA\x3\xBA\x3\xBA\x5\xBA\x894\n\xBA\x3\xBA"+
		"\x3\xBA\x5\xBA\x898\n\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x89E\n\xBB"+
		"\x3\xBB\x3\xBB\x5\xBB\x8A2\n\xBB\x3\xBB\x3\xBB\x5\xBB\x8A6\n\xBB\x3\xBB"+
		"\x3\xBB\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC"+
		"\x3\xBC\x5\xBC\x8B4\n\xBC\x3\xBD\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x8C1\n\xBE\x3\xBE\x3\xBE\x3\xBE"+
		"\x3\xBE\x5\xBE\x8C7\n\xBE\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xC0\x3"+
		"\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3"+
		"\xC0\x5\xC0\x8DA\n\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC2"+
		"\x3\xC2\x3\xC2\x5\xC2\x8E5\n\xC2\x3\xC2\x3\xC2\x5\xC2\x8E9\n\xC2\x3\xC2"+
		"\x3\xC2\x3\xC3\x3\xC3\x5\xC3\x8EF\n\xC3\x3\xC3\x3\xC3\x5\xC3\x8F3\n\xC3"+
		"\x3\xC3\x3\xC3\x5\xC3\x8F7\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5"+
		"\xC3\x8FE\n\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x5\xC4\x905\n\xC4\x3"+
		"\xC4\x5\xC4\x908\n\xC4\x3\xC4\x3\xC4\a\xC4\x90C\n\xC4\f\xC4\xE\xC4\x90F"+
		"\v\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x917\n\xC5\x3"+
		"\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x91F\n\xC5\x3\xC6\x3\xC6"+
		"\x3\xC6\x3\xC6\x5\xC6\x925\n\xC6\x3\xC7\x3\xC7\x5\xC7\x929\n\xC7\x3\xC7"+
		"\x3\xC7\x3\xC8\x3\xC8\x5\xC8\x92F\n\xC8\x3\xC8\x3\xC8\x5\xC8\x933\n\xC8"+
		"\x3\xC9\x3\xC9\x3\xC9\x2\x2\x2\xCA\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$"+
		"\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2"+
		"^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2"+
		"|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2"+
		"\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2"+
		"\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2"+
		"\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2"+
		"\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2"+
		"\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2"+
		"\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108"+
		"\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A"+
		"\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C"+
		"\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E"+
		"\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150"+
		"\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162"+
		"\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174"+
		"\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182\x2\x184\x2\x186"+
		"\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x2\x14\n\x2\x16\x16\x19\x19"+
		"\x38\x38@@TTXX\x64\x65hh\x4\x2##..\x4\x2IIQQ\x3\x2\x9A\x9B\x4\x2\x90\x91"+
		"\x9C\x9D\x3\x2\x85\x86\x3\x2\x87\x89\x10\x2\x13\x13\x16\x16\x19\x19\x1E"+
		"\x1E##..\x38\x38@@\x45\x45TTXX\\\\\x64\x65hh\x4\x2\xF\xF!!\xE\x2\n\n\x10"+
		"\x10**::\x43\x43JJLPUU[[ggjjll\x5\x2IIQQ__\x4\x2))\x36\x36\x4\x2\x12\x12"+
		"__\x4\x2\x87\x87\x92\x92\x4\x2\x37\x37II\x4\x2++\x61\x61\x14\x2\n\n\xE"+
		"\xE\x12\x14\x16 \"#%&(\x30\x33\x33\x35:<<?@\x42\x45GGIKMQSUXloo\x14\x2"+
		"\v\r\xF\x11\x15\x15!!$$\'\'\x31\x32\x34\x34;;=>\x41\x41\x46\x46HHLLRR"+
		"VWmnpq\xA15\x2\x193\x3\x2\x2\x2\x4\x1AB\x3\x2\x2\x2\x6\x1B7\x3\x2\x2\x2"+
		"\b\x1C4\x3\x2\x2\x2\n\x1C8\x3\x2\x2\x2\f\x1CD\x3\x2\x2\x2\xE\x1CF\x3\x2"+
		"\x2\x2\x10\x1D1\x3\x2\x2\x2\x12\x1D7\x3\x2\x2\x2\x14\x1D9\x3\x2\x2\x2"+
		"\x16\x1E4\x3\x2\x2\x2\x18\x1EF\x3\x2\x2\x2\x1A\x1F8\x3\x2\x2\x2\x1C\x1FD"+
		"\x3\x2\x2\x2\x1E\x1FF\x3\x2\x2\x2 \x20E\x3\x2\x2\x2\"\x210\x3\x2\x2\x2"+
		"$\x218\x3\x2\x2\x2&\x21D\x3\x2\x2\x2(\x225\x3\x2\x2\x2*\x22D\x3\x2\x2"+
		"\x2,\x235\x3\x2\x2\x2.\x23D\x3\x2\x2\x2\x30\x245\x3\x2\x2\x2\x32\x24D"+
		"\x3\x2\x2\x2\x34\x259\x3\x2\x2\x2\x36\x264\x3\x2\x2\x2\x38\x26C\x3\x2"+
		"\x2\x2:\x28C\x3\x2\x2\x2<\x28E\x3\x2\x2\x2>\x315\x3\x2\x2\x2@\x318\x3"+
		"\x2\x2\x2\x42\x320\x3\x2\x2\x2\x44\x330\x3\x2\x2\x2\x46\x334\x3\x2\x2"+
		"\x2H\x336\x3\x2\x2\x2J\x340\x3\x2\x2\x2L\x342\x3\x2\x2\x2N\x34B\x3\x2"+
		"\x2\x2P\x358\x3\x2\x2\x2R\x35F\x3\x2\x2\x2T\x361\x3\x2\x2\x2V\x374\x3"+
		"\x2\x2\x2X\x376\x3\x2\x2\x2Z\x37F\x3\x2\x2\x2\\\x38C\x3\x2\x2\x2^\x38E"+
		"\x3\x2\x2\x2`\x3A3\x3\x2\x2\x2\x62\x3AC\x3\x2\x2\x2\x64\x3B8\x3\x2\x2"+
		"\x2\x66\x3C9\x3\x2\x2\x2h\x3CB\x3\x2\x2\x2j\x3D4\x3\x2\x2\x2l\x3D9\x3"+
		"\x2\x2\x2n\x3E3\x3\x2\x2\x2p\x3E5\x3\x2\x2\x2r\x3E8\x3\x2\x2\x2t\x3F3"+
		"\x3\x2\x2\x2v\x3FF\x3\x2\x2\x2x\x401\x3\x2\x2\x2z\x406\x3\x2\x2\x2|\x409"+
		"\x3\x2\x2\x2~\x418\x3\x2\x2\x2\x80\x421\x3\x2\x2\x2\x82\x42C\x3\x2\x2"+
		"\x2\x84\x42E\x3\x2\x2\x2\x86\x43D\x3\x2\x2\x2\x88\x441\x3\x2\x2\x2\x8A"+
		"\x4C2\x3\x2\x2\x2\x8C\x4C4\x3\x2\x2\x2\x8E\x4CA\x3\x2\x2\x2\x90\x4D3\x3"+
		"\x2\x2\x2\x92\x4DB\x3\x2\x2\x2\x94\x4DD\x3\x2\x2\x2\x96\x4E3\x3\x2\x2"+
		"\x2\x98\x4E6\x3\x2\x2\x2\x9A\x4F2\x3\x2\x2\x2\x9C\x4F5\x3\x2\x2\x2\x9E"+
		"\x502\x3\x2\x2\x2\xA0\x504\x3\x2\x2\x2\xA2\x517\x3\x2\x2\x2\xA4\x519\x3"+
		"\x2\x2\x2\xA6\x525\x3\x2\x2\x2\xA8\x52B\x3\x2\x2\x2\xAA\x530\x3\x2\x2"+
		"\x2\xAC\x535\x3\x2\x2\x2\xAE\x537\x3\x2\x2\x2\xB0\x53D\x3\x2\x2\x2\xB2"+
		"\x545\x3\x2\x2\x2\xB4\x552\x3\x2\x2\x2\xB6\x556\x3\x2\x2\x2\xB8\x55C\x3"+
		"\x2\x2\x2\xBA\x56F\x3\x2\x2\x2\xBC\x572\x3\x2\x2\x2\xBE\x578\x3\x2\x2"+
		"\x2\xC0\x57B\x3\x2\x2\x2\xC2\x587\x3\x2\x2\x2\xC4\x58D\x3\x2\x2\x2\xC6"+
		"\x599\x3\x2\x2\x2\xC8\x59D\x3\x2\x2\x2\xCA\x5A6\x3\x2\x2\x2\xCC\x5AF\x3"+
		"\x2\x2\x2\xCE\x5B3\x3\x2\x2\x2\xD0\x5C2\x3\x2\x2\x2\xD2\x5C7\x3\x2\x2"+
		"\x2\xD4\x5C9\x3\x2\x2\x2\xD6\x5D1\x3\x2\x2\x2\xD8\x5D5\x3\x2\x2\x2\xDA"+
		"\x5DC\x3\x2\x2\x2\xDC\x5E1\x3\x2\x2\x2\xDE\x5EB\x3\x2\x2\x2\xE0\x5EF\x3"+
		"\x2\x2\x2\xE2\x604\x3\x2\x2\x2\xE4\x606\x3\x2\x2\x2\xE6\x612\x3\x2\x2"+
		"\x2\xE8\x61A\x3\x2\x2\x2\xEA\x61E\x3\x2\x2\x2\xEC\x626\x3\x2\x2\x2\xEE"+
		"\x62D\x3\x2\x2\x2\xF0\x631\x3\x2\x2\x2\xF2\x633\x3\x2\x2\x2\xF4\x637\x3"+
		"\x2\x2\x2\xF6\x63F\x3\x2\x2\x2\xF8\x641\x3\x2\x2\x2\xFA\x651\x3\x2\x2"+
		"\x2\xFC\x653\x3\x2\x2\x2\xFE\x656\x3\x2\x2\x2\x100\x65D\x3\x2\x2\x2\x102"+
		"\x66F\x3\x2\x2\x2\x104\x678\x3\x2\x2\x2\x106\x687\x3\x2\x2\x2\x108\x68B"+
		"\x3\x2\x2\x2\x10A\x68E\x3\x2\x2\x2\x10C\x69B\x3\x2\x2\x2\x10E\x6A1\x3"+
		"\x2\x2\x2\x110\x6BC\x3\x2\x2\x2\x112\x6BE\x3\x2\x2\x2\x114\x6C5\x3\x2"+
		"\x2\x2\x116\x6CF\x3\x2\x2\x2\x118\x6D1\x3\x2\x2\x2\x11A\x6D4\x3\x2\x2"+
		"\x2\x11C\x6DE\x3\x2\x2\x2\x11E\x6EF\x3\x2\x2\x2\x120\x6FB\x3\x2\x2\x2"+
		"\x122\x704\x3\x2\x2\x2\x124\x714\x3\x2\x2\x2\x126\x720\x3\x2\x2\x2\x128"+
		"\x727\x3\x2\x2\x2\x12A\x729\x3\x2\x2\x2\x12C\x72C\x3\x2\x2\x2\x12E\x736"+
		"\x3\x2\x2\x2\x130\x776\x3\x2\x2\x2\x132\x78C\x3\x2\x2\x2\x134\x78F\x3"+
		"\x2\x2\x2\x136\x7A0\x3\x2\x2\x2\x138\x7A7\x3\x2\x2\x2\x13A\x7B2\x3\x2"+
		"\x2\x2\x13C\x7B5\x3\x2\x2\x2\x13E\x7B9\x3\x2\x2\x2\x140\x7C7\x3\x2\x2"+
		"\x2\x142\x7C9\x3\x2\x2\x2\x144\x7D1\x3\x2\x2\x2\x146\x7E3\x3\x2\x2\x2"+
		"\x148\x7F6\x3\x2\x2\x2\x14A\x7F8\x3\x2\x2\x2\x14C\x800\x3\x2\x2\x2\x14E"+
		"\x809\x3\x2\x2\x2\x150\x80B\x3\x2\x2\x2\x152\x810\x3\x2\x2\x2\x154\x816"+
		"\x3\x2\x2\x2\x156\x81A\x3\x2\x2\x2\x158\x81E\x3\x2\x2\x2\x15A\x829\x3"+
		"\x2\x2\x2\x15C\x82B\x3\x2\x2\x2\x15E\x831\x3\x2\x2\x2\x160\x833\x3\x2"+
		"\x2\x2\x162\x83C\x3\x2\x2\x2\x164\x849\x3\x2\x2\x2\x166\x84F\x3\x2\x2"+
		"\x2\x168\x851\x3\x2\x2\x2\x16A\x861\x3\x2\x2\x2\x16C\x863\x3\x2\x2\x2"+
		"\x16E\x872\x3\x2\x2\x2\x170\x881\x3\x2\x2\x2\x172\x890\x3\x2\x2\x2\x174"+
		"\x899\x3\x2\x2\x2\x176\x8A9\x3\x2\x2\x2\x178\x8B5\x3\x2\x2\x2\x17A\x8B8"+
		"\x3\x2\x2\x2\x17C\x8C8\x3\x2\x2\x2\x17E\x8CD\x3\x2\x2\x2\x180\x8DB\x3"+
		"\x2\x2\x2\x182\x8E1\x3\x2\x2\x2\x184\x8EC\x3\x2\x2\x2\x186\x904\x3\x2"+
		"\x2\x2\x188\x910\x3\x2\x2\x2\x18A\x920\x3\x2\x2\x2\x18C\x926\x3\x2\x2"+
		"\x2\x18E\x92C\x3\x2\x2\x2\x190\x934\x3\x2\x2\x2\x192\x194\a\x3\x2\x2\x193"+
		"\x192\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x196\x3\x2\x2\x2\x195\x197"+
		"\x5\xB4[\x2\x196\x195\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x199\x3\x2"+
		"\x2\x2\x198\x19A\x5\xB8]\x2\x199\x198\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2"+
		"\x19A\x19E\x3\x2\x2\x2\x19B\x19D\x5\x138\x9D\x2\x19C\x19B\x3\x2\x2\x2"+
		"\x19D\x1A0\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F"+
		"\x1A2\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A3\x5\xBC_\x2\x1A2\x1A1"+
		"\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A5\a\x2"+
		"\x2\x3\x1A5\x3\x3\x2\x2\x2\x1A6\x1A8\x5\x190\xC9\x2\x1A7\x1A9\x5\x14\v"+
		"\x2\x1A8\x1A7\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AC\x3\x2\x2\x2"+
		"\x1AA\x1AC\x5\xC2\x62\x2\x1AB\x1A6\x3\x2\x2\x2\x1AB\x1AA\x3\x2\x2\x2\x1AC"+
		"\x1B4\x3\x2\x2\x2\x1AD\x1AE\a\x81\x2\x2\x1AE\x1B0\x5\x190\xC9\x2\x1AF"+
		"\x1B1\x5\x14\v\x2\x1B0\x1AF\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B3"+
		"\x3\x2\x2\x2\x1B2\x1AD\x3\x2\x2\x2\x1B3\x1B6\x3\x2\x2\x2\x1B4\x1B2\x3"+
		"\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x5\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2"+
		"\x2\x1B7\x1BD\x5\b\x5\x2\x1B8\x1BC\a\x92\x2\x2\x1B9\x1BC\x5\x120\x91\x2"+
		"\x1BA\x1BC\a\x87\x2\x2\x1BB\x1B8\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BB"+
		"\x1BA\x3\x2\x2\x2\x1BC\x1BF\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BE"+
		"\x3\x2\x2\x2\x1BE\a\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1C0\x1C5\x5\n\x6"+
		"\x2\x1C1\x1C5\x5\x12\n\x2\x1C2\x1C3\ak\x2\x2\x1C3\x1C5\a\x87\x2\x2\x1C4"+
		"\x1C0\x3\x2\x2\x2\x1C4\x1C1\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C5\t\x3"+
		"\x2\x2\x2\x1C6\x1C9\x5\f\a\x2\x1C7\x1C9\a\x13\x2\x2\x1C8\x1C6\x3\x2\x2"+
		"\x2\x1C8\x1C7\x3\x2\x2\x2\x1C9\v\x3\x2\x2\x2\x1CA\x1CE\x5\xE\b\x2\x1CB"+
		"\x1CE\x5\x10\t\x2\x1CC\x1CE\a\x1E\x2\x2\x1CD\x1CA\x3\x2\x2\x2\x1CD\x1CB"+
		"\x3\x2\x2\x2\x1CD\x1CC\x3\x2\x2\x2\x1CE\r\x3\x2\x2\x2\x1CF\x1D0\t\x2\x2"+
		"\x2\x1D0\xF\x3\x2\x2\x2\x1D1\x1D2\t\x3\x2\x2\x1D2\x11\x3\x2\x2\x2\x1D3"+
		"\x1D8\x5\x4\x3\x2\x1D4\x1D8\a\x45\x2\x2\x1D5\x1D8\a$\x2\x2\x1D6\x1D8\a"+
		"\\\x2\x2\x1D7\x1D3\x3\x2\x2\x2\x1D7\x1D4\x3\x2\x2\x2\x1D7\x1D5\x3\x2\x2"+
		"\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8\x13\x3\x2\x2\x2\x1D9\x1DA\a\x90\x2\x2\x1DA"+
		"\x1DF\x5\x6\x4\x2\x1DB\x1DC\a\x82\x2\x2\x1DC\x1DE\x5\x6\x4\x2\x1DD\x1DB"+
		"\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2\x2\x1DF\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3"+
		"\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2\x1E2\x1E3\a\x91"+
		"\x2\x2\x1E3\x15\x3\x2\x2\x2\x1E4\x1E9\x5\x18\r\x2\x1E5\x1E6\a\x82\x2\x2"+
		"\x1E6\x1E8\x5\x18\r\x2\x1E7\x1E5\x3\x2\x2\x2\x1E8\x1EB\x3\x2\x2\x2\x1E9"+
		"\x1E7\x3\x2\x2\x2\x1E9\x1EA\x3\x2\x2\x2\x1EA\x17\x3\x2\x2\x2\x1EB\x1E9"+
		"\x3\x2\x2\x2\x1EC\x1ED\x5\x190\xC9\x2\x1ED\x1EE\a\x83\x2\x2\x1EE\x1F0"+
		"\x3\x2\x2\x2\x1EF\x1EC\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F2\x3"+
		"\x2\x2\x2\x1F1\x1F3\t\x4\x2\x2\x1F2\x1F1\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2"+
		"\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F5\x5\x1A\xE\x2\x1F5\x19\x3\x2\x2\x2"+
		"\x1F6\x1F9\x5\x1E\x10\x2\x1F7\x1F9\x5\x1C\xF\x2\x1F8\x1F6\x3\x2\x2\x2"+
		"\x1F8\x1F7\x3\x2\x2\x2\x1F9\x1B\x3\x2\x2\x2\x1FA\x1FE\x5\x64\x33\x2\x1FB"+
		"\x1FE\x5p\x39\x2\x1FC\x1FE\x5\"\x12\x2\x1FD\x1FA\x3\x2\x2\x2\x1FD\x1FB"+
		"\x3\x2\x2\x2\x1FD\x1FC\x3\x2\x2\x2\x1FE\x1D\x3\x2\x2\x2\x1FF\x200\x5:"+
		"\x1E\x2\x200\x201\x5 \x11\x2\x201\x202\x5\x1A\xE\x2\x202\x1F\x3\x2\x2"+
		"\x2\x203\x20F\a\x8F\x2\x2\x204\x20F\a\x9E\x2\x2\x205\x20F\a\x9F\x2\x2"+
		"\x206\x20F\a\xA0\x2\x2\x207\x20F\a\xA1\x2\x2\x208\x20F\a\xA2\x2\x2\x209"+
		"\x20F\a\xA3\x2\x2\x20A\x20F\a\xA4\x2\x2\x20B\x20F\a\xA5\x2\x2\x20C\x20F"+
		"\a\xA7\x2\x2\x20D\x20F\x5\x158\xAD\x2\x20E\x203\x3\x2\x2\x2\x20E\x204"+
		"\x3\x2\x2\x2\x20E\x205\x3\x2\x2\x2\x20E\x206\x3\x2\x2\x2\x20E\x207\x3"+
		"\x2\x2\x2\x20E\x208\x3\x2\x2\x2\x20E\x209\x3\x2\x2\x2\x20E\x20A\x3\x2"+
		"\x2\x2\x20E\x20B\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20D\x3\x2\x2"+
		"\x2\x20F!\x3\x2\x2\x2\x210\x216\x5$\x13\x2\x211\x212\a\x92\x2\x2\x212"+
		"\x213\x5\x1A\xE\x2\x213\x214\a\x83\x2\x2\x214\x215\x5\x1A\xE\x2\x215\x217"+
		"\x3\x2\x2\x2\x216\x211\x3\x2\x2\x2\x216\x217\x3\x2\x2\x2\x217#\x3\x2\x2"+
		"\x2\x218\x21B\x5&\x14\x2\x219\x21A\a\x94\x2\x2\x21A\x21C\x5$\x13\x2\x21B"+
		"\x219\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C%\x3\x2\x2\x2\x21D\x222\x5"+
		"(\x15\x2\x21E\x21F\a\x98\x2\x2\x21F\x221\x5(\x15\x2\x220\x21E\x3\x2\x2"+
		"\x2\x221\x224\x3\x2\x2\x2\x222\x220\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2"+
		"\x223\'\x3\x2\x2\x2\x224\x222\x3\x2\x2\x2\x225\x22A\x5*\x16\x2\x226\x227"+
		"\a\x97\x2\x2\x227\x229\x5*\x16\x2\x228\x226\x3\x2\x2\x2\x229\x22C\x3\x2"+
		"\x2\x2\x22A\x228\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B)\x3\x2\x2\x2\x22C"+
		"\x22A\x3\x2\x2\x2\x22D\x232\x5,\x17\x2\x22E\x22F\a\x8B\x2\x2\x22F\x231"+
		"\x5,\x17\x2\x230\x22E\x3\x2\x2\x2\x231\x234\x3\x2\x2\x2\x232\x230\x3\x2"+
		"\x2\x2\x232\x233\x3\x2\x2\x2\x233+\x3\x2\x2\x2\x234\x232\x3\x2\x2\x2\x235"+
		"\x23A\x5.\x18\x2\x236\x237\a\x8C\x2\x2\x237\x239\x5.\x18\x2\x238\x236"+
		"\x3\x2\x2\x2\x239\x23C\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x23B\x3"+
		"\x2\x2\x2\x23B-\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2\x23D\x242\x5\x30\x19"+
		"\x2\x23E\x23F\a\x8A\x2\x2\x23F\x241\x5\x30\x19\x2\x240\x23E\x3\x2\x2\x2"+
		"\x241\x244\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243"+
		"/\x3\x2\x2\x2\x244\x242\x3\x2\x2\x2\x245\x24A\x5\x32\x1A\x2\x246\x247"+
		"\t\x5\x2\x2\x247\x249\x5\x32\x1A\x2\x248\x246\x3\x2\x2\x2\x249\x24C\x3"+
		"\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x31\x3\x2\x2"+
		"\x2\x24C\x24A\x3\x2\x2\x2\x24D\x256\x5\x34\x1B\x2\x24E\x24F\t\x6\x2\x2"+
		"\x24F\x255\x5\x34\x1B\x2\x250\x251\a<\x2\x2\x251\x255\x5\x62\x32\x2\x252"+
		"\x253\a\xE\x2\x2\x253\x255\x5\x6\x4\x2\x254\x24E\x3\x2\x2\x2\x254\x250"+
		"\x3\x2\x2\x2\x254\x252\x3\x2\x2\x2\x255\x258\x3\x2\x2\x2\x256\x254\x3"+
		"\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257\x33\x3\x2\x2\x2\x258\x256\x3\x2\x2"+
		"\x2\x259\x261\x5\x36\x1C\x2\x25A\x25D\a\xA6\x2\x2\x25B\x25D\x5\x156\xAC"+
		"\x2\x25C\x25A\x3\x2\x2\x2\x25C\x25B\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2"+
		"\x25E\x260\x5\x36\x1C\x2\x25F\x25C\x3\x2\x2\x2\x260\x263\x3\x2\x2\x2\x261"+
		"\x25F\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x35\x3\x2\x2\x2\x263\x261"+
		"\x3\x2\x2\x2\x264\x269\x5\x38\x1D\x2\x265\x266\t\a\x2\x2\x266\x268\x5"+
		"\x38\x1D\x2\x267\x265\x3\x2\x2\x2\x268\x26B\x3\x2\x2\x2\x269\x267\x3\x2"+
		"\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x37\x3\x2\x2\x2\x26B\x269\x3\x2\x2\x2"+
		"\x26C\x271\x5:\x1E\x2\x26D\x26E\t\b\x2\x2\x26E\x270\x5:\x1E\x2\x26F\x26D"+
		"\x3\x2\x2\x2\x270\x273\x3\x2\x2\x2\x271\x26F\x3\x2\x2\x2\x271\x272\x3"+
		"\x2\x2\x2\x272\x39\x3\x2\x2\x2\x273\x271\x3\x2\x2\x2\x274\x28D\x5<\x1F"+
		"\x2\x275\x276\a\x85\x2\x2\x276\x28D\x5:\x1E\x2\x277\x278\a\x86\x2\x2\x278"+
		"\x28D\x5:\x1E\x2\x279\x27A\a\x8D\x2\x2\x27A\x28D\x5:\x1E\x2\x27B\x27C"+
		"\a\x8E\x2\x2\x27C\x28D\x5:\x1E\x2\x27D\x27E\a\x95\x2\x2\x27E\x28D\x5:"+
		"\x1E\x2\x27F\x280\a\x96\x2\x2\x280\x28D\x5:\x1E\x2\x281\x282\a\x7F\x2"+
		"\x2\x282\x283\x5\x6\x4\x2\x283\x284\a\x80\x2\x2\x284\x285\x5:\x1E\x2\x285"+
		"\x28D\x3\x2\x2\x2\x286\x287\a\x11\x2\x2\x287\x28D\x5:\x1E\x2\x288\x289"+
		"\a\x8A\x2\x2\x289\x28D\x5:\x1E\x2\x28A\x28B\a\x87\x2\x2\x28B\x28D\x5:"+
		"\x1E\x2\x28C\x274\x3\x2\x2\x2\x28C\x275\x3\x2\x2\x2\x28C\x277\x3\x2\x2"+
		"\x2\x28C\x279\x3\x2\x2\x2\x28C\x27B\x3\x2\x2\x2\x28C\x27D\x3\x2\x2\x2"+
		"\x28C\x27F\x3\x2\x2\x2\x28C\x281\x3\x2\x2\x2\x28C\x286\x3\x2\x2\x2\x28C"+
		"\x288\x3\x2\x2\x2\x28C\x28A\x3\x2\x2\x2\x28D;\x3\x2\x2\x2\x28E\x292\x5"+
		"> \x2\x28F\x291\x5\x42\"\x2\x290\x28F\x3\x2\x2\x2\x291\x294\x3\x2\x2\x2"+
		"\x292\x290\x3\x2\x2\x2\x292\x293\x3\x2\x2\x2\x293\x2A5\x3\x2\x2\x2\x294"+
		"\x292\x3\x2\x2\x2\x295\x29C\x5@!\x2\x296\x29C\x5\x18C\xC7\x2\x297\x29C"+
		"\a\x95\x2\x2\x298\x29C\a\x96\x2\x2\x299\x29A\a\x99\x2\x2\x29A\x29C\x5"+
		"\x190\xC9\x2\x29B\x295\x3\x2\x2\x2\x29B\x296\x3\x2\x2\x2\x29B\x297\x3"+
		"\x2\x2\x2\x29B\x298\x3\x2\x2\x2\x29B\x299\x3\x2\x2\x2\x29C\x2A0\x3\x2"+
		"\x2\x2\x29D\x29F\x5\x42\"\x2\x29E\x29D\x3\x2\x2\x2\x29F\x2A2\x3\x2\x2"+
		"\x2\x2A0\x29E\x3\x2\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A1\x2A4\x3\x2\x2\x2"+
		"\x2A2\x2A0\x3\x2\x2\x2\x2A3\x29B\x3\x2\x2\x2\x2A4\x2A7\x3\x2\x2\x2\x2A5"+
		"\x2A3\x3\x2\x2\x2\x2A5\x2A6\x3\x2\x2\x2\x2A6=\x3\x2\x2\x2\x2A7\x2A5\x3"+
		"\x2\x2\x2\x2A8\x316\x5\x15A\xAE\x2\x2A9\x2AB\x5\x190\xC9\x2\x2AA\x2AC"+
		"\x5\x14\v\x2\x2AB\x2AA\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x316\x3"+
		"\x2\x2\x2\x2AD\x2AE\a\x7F\x2\x2\x2AE\x2AF\x5\x1A\xE\x2\x2AF\x2B0\a\x80"+
		"\x2\x2\x2B0\x316\x3\x2\x2\x2\x2B1\x316\x5\x46$\x2\x2B2\x316\x5\xC2\x62"+
		"\x2\x2B3\x316\ar\x2\x2\x2B4\x316\a_\x2\x2\x2B5\x2BF\a\x12\x2\x2\x2B6\x2B7"+
		"\a\x81\x2\x2\x2B7\x2B9\x5\x190\xC9\x2\x2B8\x2BA\x5\x14\v\x2\x2B9\x2B8"+
		"\x3\x2\x2\x2\x2B9\x2BA\x3\x2\x2\x2\x2BA\x2C0\x3\x2\x2\x2\x2BB\x2BC\a}"+
		"\x2\x2\x2BC\x2BD\x5H%\x2\x2BD\x2BE\a~\x2\x2\x2BE\x2C0\x3\x2\x2\x2\x2BF"+
		"\x2B6\x3\x2\x2\x2\x2BF\x2BB\x3\x2\x2\x2\x2C0\x316\x3\x2\x2\x2\x2C1\x2DE"+
		"\a\x43\x2\x2\x2C2\x2D8\x5\x6\x4\x2\x2C3\x2D9\x5\x18E\xC8\x2\x2C4\x2D9"+
		"\x5J&\x2\x2C5\x2C6\a}\x2\x2\x2C6\x2C7\x5H%\x2\x2C7\x2CB\a~\x2\x2\x2C8"+
		"\x2CA\x5\x120\x91\x2\x2C9\x2C8\x3\x2\x2\x2\x2CA\x2CD\x3\x2\x2\x2\x2CB"+
		"\x2C9\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CF\x3\x2\x2\x2\x2CD\x2CB"+
		"\x3\x2\x2\x2\x2CE\x2D0\x5\x122\x92\x2\x2CF\x2CE\x3\x2\x2\x2\x2CF\x2D0"+
		"\x3\x2\x2\x2\x2D0\x2D9\x3\x2\x2\x2\x2D1\x2D3\x5\x120\x91\x2\x2D2\x2D1"+
		"\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x2D2\x3\x2\x2\x2\x2D4\x2D5\x3"+
		"\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D7\x5\x122\x92\x2\x2D7\x2D9\x3"+
		"\x2\x2\x2\x2D8\x2C3\x3\x2\x2\x2\x2D8\x2C4\x3\x2\x2\x2\x2D8\x2C5\x3\x2"+
		"\x2\x2\x2D8\x2D2\x3\x2\x2\x2\x2D9\x2DF\x3\x2\x2\x2\x2DA\x2DF\x5X-\x2\x2DB"+
		"\x2DC\x5\x120\x91\x2\x2DC\x2DD\x5\x122\x92\x2\x2DD\x2DF\x3\x2\x2\x2\x2DE"+
		"\x2C2\x3\x2\x2\x2\x2DE\x2DA\x3\x2\x2\x2\x2DE\x2DB\x3\x2\x2\x2\x2DF\x316"+
		"\x3\x2\x2\x2\x2E0\x2E1\a\x63\x2\x2\x2E1\x2E5\a\x7F\x2\x2\x2E2\x2E6\x5"+
		"^\x30\x2\x2E3\x2E6\x5\x6\x4\x2\x2E4\x2E6\ak\x2\x2\x2E5\x2E2\x3\x2\x2\x2"+
		"\x2E5\x2E3\x3\x2\x2\x2\x2E5\x2E4\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7"+
		"\x316\a\x80\x2\x2\x2E8\x2E9\a\x1A\x2\x2\x2E9\x2EA\a\x7F\x2\x2\x2EA\x2EB"+
		"\x5\x1A\xE\x2\x2EB\x2EC\a\x80\x2\x2\x2EC\x316\x3\x2\x2\x2\x2ED\x2EE\a"+
		"\x66\x2\x2\x2EE\x2EF\a\x7F\x2\x2\x2EF\x2F0\x5\x1A\xE\x2\x2F0\x2F1\a\x80"+
		"\x2\x2\x2F1\x316\x3\x2\x2\x2\x2F2\x2F3\a\x1F\x2\x2\x2F3\x2F4\a\x7F\x2"+
		"\x2\x2F4\x2F5\x5\x6\x4\x2\x2F5\x2F6\a\x80\x2\x2\x2F6\x316\x3\x2\x2\x2"+
		"\x2F7\x2F9\a\x10\x2\x2\x2F8\x2F7\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9"+
		"\x2FA\x3\x2\x2\x2\x2FA\x300\a \x2\x2\x2FB\x2FD\a\x7F\x2\x2\x2FC\x2FE\x5"+
		"h\x35\x2\x2FD\x2FC\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2"+
		"\x2\x2FF\x301\a\x80\x2\x2\x300\x2FB\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2"+
		"\x301\x302\x3\x2\x2\x2\x302\x316\x5\x8CG\x2\x303\x304\aY\x2\x2\x304\x305"+
		"\a\x7F\x2\x2\x305\x306\x5\x6\x4\x2\x306\x307\a\x80\x2\x2\x307\x316\x3"+
		"\x2\x2\x2\x308\x309\a\x41\x2\x2\x309\x30F\a\x7F\x2\x2\x30A\x30B\x5\x190"+
		"\xC9\x2\x30B\x30C\a\x81\x2\x2\x30C\x30E\x3\x2\x2\x2\x30D\x30A\x3\x2\x2"+
		"\x2\x30E\x311\x3\x2\x2\x2\x30F\x30D\x3\x2\x2\x2\x30F\x310\x3\x2\x2\x2"+
		"\x310\x312\x3\x2\x2\x2\x311\x30F\x3\x2\x2\x2\x312\x313\x5\x190\xC9\x2"+
		"\x313\x314\a\x80\x2\x2\x314\x316\x3\x2\x2\x2\x315\x2A8\x3\x2\x2\x2\x315"+
		"\x2A9\x3\x2\x2\x2\x315\x2AD\x3\x2\x2\x2\x315\x2B1\x3\x2\x2\x2\x315\x2B2"+
		"\x3\x2\x2\x2\x315\x2B3\x3\x2\x2\x2\x315\x2B4\x3\x2\x2\x2\x315\x2B5\x3"+
		"\x2\x2\x2\x315\x2C1\x3\x2\x2\x2\x315\x2E0\x3\x2\x2\x2\x315\x2E8\x3\x2"+
		"\x2\x2\x315\x2ED\x3\x2\x2\x2\x315\x2F2\x3\x2\x2\x2\x315\x2F8\x3\x2\x2"+
		"\x2\x315\x303\x3\x2\x2\x2\x315\x308\x3\x2\x2\x2\x316?\x3\x2\x2\x2\x317"+
		"\x319\a\x92\x2\x2\x318\x317\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x31A"+
		"\x3\x2\x2\x2\x31A\x31B\a\x81\x2\x2\x31B\x31D\x5\x190\xC9\x2\x31C\x31E"+
		"\x5\x14\v\x2\x31D\x31C\x3\x2\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\x41\x3\x2"+
		"\x2\x2\x31F\x321\a\x92\x2\x2\x320\x31F\x3\x2\x2\x2\x320\x321\x3\x2\x2"+
		"\x2\x321\x322\x3\x2\x2\x2\x322\x323\a}\x2\x2\x323\x328\x5\x44#\x2\x324"+
		"\x325\a\x82\x2\x2\x325\x327\x5\x44#\x2\x326\x324\x3\x2\x2\x2\x327\x32A"+
		"\x3\x2\x2\x2\x328\x326\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32B\x3"+
		"\x2\x2\x2\x32A\x328\x3\x2\x2\x2\x32B\x32C\a~\x2\x2\x32C\x43\x3\x2\x2\x2"+
		"\x32D\x32E\x5\x190\xC9\x2\x32E\x32F\a\x83\x2\x2\x32F\x331\x3\x2\x2\x2"+
		"\x330\x32D\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332"+
		"\x333\x5\x1A\xE\x2\x333\x45\x3\x2\x2\x2\x334\x335\t\t\x2\x2\x335G\x3\x2"+
		"\x2\x2\x336\x33B\x5\x1A\xE\x2\x337\x338\a\x82\x2\x2\x338\x33A\x5\x1A\xE"+
		"\x2\x339\x337\x3\x2\x2\x2\x33A\x33D\x3\x2\x2\x2\x33B\x339\x3\x2\x2\x2"+
		"\x33B\x33C\x3\x2\x2\x2\x33CI\x3\x2\x2\x2\x33D\x33B\x3\x2\x2\x2\x33E\x341"+
		"\x5L\'\x2\x33F\x341\x5T+\x2\x340\x33E\x3\x2\x2\x2\x340\x33F\x3\x2\x2\x2"+
		"\x341K\x3\x2\x2\x2\x342\x347\a{\x2\x2\x343\x345\x5N(\x2\x344\x346\a\x82"+
		"\x2\x2\x345\x344\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x348\x3\x2\x2"+
		"\x2\x347\x343\x3\x2\x2\x2\x347\x348\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2"+
		"\x349\x34A\a|\x2\x2\x34AM\x3\x2\x2\x2\x34B\x350\x5P)\x2\x34C\x34D\a\x82"+
		"\x2\x2\x34D\x34F\x5P)\x2\x34E\x34C\x3\x2\x2\x2\x34F\x352\x3\x2\x2\x2\x350"+
		"\x34E\x3\x2\x2\x2\x350\x351\x3\x2\x2\x2\x351O\x3\x2\x2\x2\x352\x350\x3"+
		"\x2\x2\x2\x353\x359\x5\x190\xC9\x2\x354\x355\a}\x2\x2\x355\x356\x5\x1A"+
		"\xE\x2\x356\x357\a~\x2\x2\x357\x359\x3\x2\x2\x2\x358\x353\x3\x2\x2\x2"+
		"\x358\x354\x3\x2\x2\x2\x359\x35A\x3\x2\x2\x2\x35A\x35B\a\x8F\x2\x2\x35B"+
		"\x35C\x5R*\x2\x35CQ\x3\x2\x2\x2\x35D\x360\x5\x1A\xE\x2\x35E\x360\x5J&"+
		"\x2\x35F\x35D\x3\x2\x2\x2\x35F\x35E\x3\x2\x2\x2\x360S\x3\x2\x2\x2\x361"+
		"\x362\a{\x2\x2\x362\x367\x5V,\x2\x363\x364\a\x82\x2\x2\x364\x366\x5V,"+
		"\x2\x365\x363\x3\x2\x2\x2\x366\x369\x3\x2\x2\x2\x367\x365\x3\x2\x2\x2"+
		"\x367\x368\x3\x2\x2\x2\x368\x36B\x3\x2\x2\x2\x369\x367\x3\x2\x2\x2\x36A"+
		"\x36C\a\x82\x2\x2\x36B\x36A\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36D"+
		"\x3\x2\x2\x2\x36D\x36E\a|\x2\x2\x36EU\x3\x2\x2\x2\x36F\x375\x5\x1C\xF"+
		"\x2\x370\x371\a{\x2\x2\x371\x372\x5H%\x2\x372\x373\a|\x2\x2\x373\x375"+
		"\x3\x2\x2\x2\x374\x36F\x3\x2\x2\x2\x374\x370\x3\x2\x2\x2\x375W\x3\x2\x2"+
		"\x2\x376\x37B\a{\x2\x2\x377\x379\x5Z.\x2\x378\x37A\a\x82\x2\x2\x379\x378"+
		"\x3\x2\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x37C\x3\x2\x2\x2\x37B\x377\x3"+
		"\x2\x2\x2\x37B\x37C\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37E\a|\x2"+
		"\x2\x37EY\x3\x2\x2\x2\x37F\x384\x5\\/\x2\x380\x381\a\x82\x2\x2\x381\x383"+
		"\x5\\/\x2\x382\x380\x3\x2\x2\x2\x383\x386\x3\x2\x2\x2\x384\x382\x3\x2"+
		"\x2\x2\x384\x385\x3\x2\x2\x2\x385[\x3\x2\x2\x2\x386\x384\x3\x2\x2\x2\x387"+
		"\x38D\x5<\x1F\x2\x388\x389\x5\x190\xC9\x2\x389\x38A\a\x8F\x2\x2\x38A\x38B"+
		"\x5\x1A\xE\x2\x38B\x38D\x3\x2\x2\x2\x38C\x387\x3\x2\x2\x2\x38C\x388\x3"+
		"\x2\x2\x2\x38D]\x3\x2\x2\x2\x38E\x397\x5\x190\xC9\x2\x38F\x391\x5`\x31"+
		"\x2\x390\x38F\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x398\x3\x2\x2\x2"+
		"\x392\x393\a\x93\x2\x2\x393\x395\x5\x190\xC9\x2\x394\x396\x5`\x31\x2\x395"+
		"\x394\x3\x2\x2\x2\x395\x396\x3\x2\x2\x2\x396\x398\x3\x2\x2\x2\x397\x390"+
		"\x3\x2\x2\x2\x397\x392\x3\x2\x2\x2\x398\x3A0\x3\x2\x2\x2\x399\x39A\a\x81"+
		"\x2\x2\x39A\x39C\x5\x190\xC9\x2\x39B\x39D\x5`\x31\x2\x39C\x39B\x3\x2\x2"+
		"\x2\x39C\x39D\x3\x2\x2\x2\x39D\x39F\x3\x2\x2\x2\x39E\x399\x3\x2\x2\x2"+
		"\x39F\x3A2\x3\x2\x2\x2\x3A0\x39E\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1"+
		"_\x3\x2\x2\x2\x3A2\x3A0\x3\x2\x2\x2\x3A3\x3A7\a\x90\x2\x2\x3A4\x3A6\a"+
		"\x82\x2\x2\x3A5\x3A4\x3\x2\x2\x2\x3A6\x3A9\x3\x2\x2\x2\x3A7\x3A5\x3\x2"+
		"\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3AA\x3\x2\x2\x2\x3A9\x3A7\x3\x2\x2"+
		"\x2\x3AA\x3AB\a\x91\x2\x2\x3AB\x61\x3\x2\x2\x2\x3AC\x3B1\x5\b\x5\x2\x3AD"+
		"\x3B0\x5\x120\x91\x2\x3AE\x3B0\a\x87\x2\x2\x3AF\x3AD\x3\x2\x2\x2\x3AF"+
		"\x3AE\x3\x2\x2\x2\x3B0\x3B3\x3\x2\x2\x2\x3B1\x3AF\x3\x2\x2\x2\x3B1\x3B2"+
		"\x3\x2\x2\x2\x3B2\x3B5\x3\x2\x2\x2\x3B3\x3B1\x3\x2\x2\x2\x3B4\x3B6\a\x92"+
		"\x2\x2\x3B5\x3B4\x3\x2\x2\x2\x3B5\x3B6\x3\x2\x2\x2\x3B6\x63\x3\x2\x2\x2"+
		"\x3B7\x3B9\a\x10\x2\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2\x3B9"+
		"\x3BA\x3\x2\x2\x2\x3BA\x3BB\x5\x66\x34\x2\x3BB\x3BC\x5\x154\xAB\x2\x3BC"+
		"\x3BD\x5n\x38\x2\x3BD\x65\x3\x2\x2\x2\x3BE\x3BF\a\x7F\x2\x2\x3BF\x3CA"+
		"\a\x80\x2\x2\x3C0\x3C1\a\x7F\x2\x2\x3C1\x3C2\x5h\x35\x2\x3C2\x3C3\a\x80"+
		"\x2\x2\x3C3\x3CA\x3\x2\x2\x2\x3C4\x3C5\a\x7F\x2\x2\x3C5\x3C6\x5l\x37\x2"+
		"\x3C6\x3C7\a\x80\x2\x2\x3C7\x3CA\x3\x2\x2\x2\x3C8\x3CA\x5\x190\xC9\x2"+
		"\x3C9\x3BE\x3\x2\x2\x2\x3C9\x3C0\x3\x2\x2\x2\x3C9\x3C4\x3\x2\x2\x2\x3C9"+
		"\x3C8\x3\x2\x2\x2\x3CAg\x3\x2\x2\x2\x3CB\x3D0\x5j\x36\x2\x3CC\x3CD\a\x82"+
		"\x2\x2\x3CD\x3CF\x5j\x36\x2\x3CE\x3CC\x3\x2\x2\x2\x3CF\x3D2\x3\x2\x2\x2"+
		"\x3D0\x3CE\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1i\x3\x2\x2\x2\x3D2\x3D0"+
		"\x3\x2\x2\x2\x3D3\x3D5\t\x4\x2\x2\x3D4\x3D3\x3\x2\x2\x2\x3D4\x3D5\x3\x2"+
		"\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6\x3D7\x5\x6\x4\x2\x3D7\x3D8\x5\x190\xC9"+
		"\x2\x3D8k\x3\x2\x2\x2\x3D9\x3DE\x5\x190\xC9\x2\x3DA\x3DB\a\x82\x2\x2\x3DB"+
		"\x3DD\x5\x190\xC9\x2\x3DC\x3DA\x3\x2\x2\x2\x3DD\x3E0\x3\x2\x2\x2\x3DE"+
		"\x3DC\x3\x2\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DFm\x3\x2\x2\x2\x3E0\x3DE\x3"+
		"\x2\x2\x2\x3E1\x3E4\x5\x1A\xE\x2\x3E2\x3E4\x5\x8CG\x2\x3E3\x3E1\x3\x2"+
		"\x2\x2\x3E3\x3E2\x3\x2\x2\x2\x3E4o\x3\x2\x2\x2\x3E5\x3E6\x5r:\x2\x3E6"+
		"\x3E7\x5t;\x2\x3E7q\x3\x2\x2\x2\x3E8\x3EA\a\x31\x2\x2\x3E9\x3EB\x5\x6"+
		"\x4\x2\x3EA\x3E9\x3\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2"+
		"\x2\x3EC\x3ED\x5\x190\xC9\x2\x3ED\x3EE\a\x37\x2\x2\x3EE\x3EF\x5\x1A\xE"+
		"\x2\x3EFs\x3\x2\x2\x2\x3F0\x3F2\x5v<\x2\x3F1\x3F0\x3\x2\x2\x2\x3F2\x3F5"+
		"\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3F6\x3"+
		"\x2\x2\x2\x3F5\x3F3\x3\x2\x2\x2\x3F6\x3F8\x5\x82\x42\x2\x3F7\x3F9\x5\x84"+
		"\x43\x2\x3F8\x3F7\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9u\x3\x2\x2\x2"+
		"\x3FA\x400\x5r:\x2\x3FB\x400\x5x=\x2\x3FC\x400\x5z>\x2\x3FD\x400\x5|?"+
		"\x2\x3FE\x400\x5~@\x2\x3FF\x3FA\x3\x2\x2\x2\x3FF\x3FB\x3\x2\x2\x2\x3FF"+
		"\x3FC\x3\x2\x2\x2\x3FF\x3FD\x3\x2\x2\x2\x3FF\x3FE\x3\x2\x2\x2\x400w\x3"+
		"\x2\x2\x2\x401\x402\a>\x2\x2\x402\x403\x5\x190\xC9\x2\x403\x404\a\x8F"+
		"\x2\x2\x404\x405\x5\x1A\xE\x2\x405y\x3\x2\x2\x2\x406\x407\an\x2\x2\x407"+
		"\x408\x5\x1A\xE\x2\x408{\x3\x2\x2\x2\x409\x40B\a=\x2\x2\x40A\x40C\x5\x6"+
		"\x4\x2\x40B\x40A\x3\x2\x2\x2\x40B\x40C\x3\x2\x2\x2\x40C\x40D\x3\x2\x2"+
		"\x2\x40D\x40E\x5\x190\xC9\x2\x40E\x40F\a\x37\x2\x2\x40F\x410\x5\x1A\xE"+
		"\x2\x410\x411\a\x46\x2\x2\x411\x412\x5\x1A\xE\x2\x412\x413\a\'\x2\x2\x413"+
		"\x416\x5\x1A\xE\x2\x414\x415\a;\x2\x2\x415\x417\x5\x190\xC9\x2\x416\x414"+
		"\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417}\x3\x2\x2\x2\x418\x419\aH\x2\x2"+
		"\x419\x41E\x5\x80\x41\x2\x41A\x41B\a\x82\x2\x2\x41B\x41D\x5\x80\x41\x2"+
		"\x41C\x41A\x3\x2\x2\x2\x41D\x420\x3\x2\x2\x2\x41E\x41C\x3\x2\x2\x2\x41E"+
		"\x41F\x3\x2\x2\x2\x41F\x7F\x3\x2\x2\x2\x420\x41E\x3\x2\x2\x2\x421\x423"+
		"\x5\x1A\xE\x2\x422\x424\t\n\x2\x2\x423\x422\x3\x2\x2\x2\x423\x424\x3\x2"+
		"\x2\x2\x424\x81\x3\x2\x2\x2\x425\x426\aV\x2\x2\x426\x42D\x5\x1A\xE\x2"+
		"\x427\x428\a\x34\x2\x2\x428\x429\x5\x1A\xE\x2\x429\x42A\a\x15\x2\x2\x42A"+
		"\x42B\x5\x1A\xE\x2\x42B\x42D\x3\x2\x2\x2\x42C\x425\x3\x2\x2\x2\x42C\x427"+
		"\x3\x2\x2\x2\x42D\x83\x3\x2\x2\x2\x42E\x42F\a;\x2\x2\x42F\x430\x5\x190"+
		"\xC9\x2\x430\x431\x5t;\x2\x431\x85\x3\x2\x2\x2\x432\x433\x5\x190\xC9\x2"+
		"\x433\x434\a\x83\x2\x2\x434\x435\x5\x86\x44\x2\x435\x43E\x3\x2\x2\x2\x436"+
		"\x439\x5\x8EH\x2\x437\x439\x5\x94K\x2\x438\x436\x3\x2\x2\x2\x438\x437"+
		"\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43B\a\x84\x2\x2\x43B\x43E\x3"+
		"\x2\x2\x2\x43C\x43E\x5\x88\x45\x2\x43D\x432\x3\x2\x2\x2\x43D\x438\x3\x2"+
		"\x2\x2\x43D\x43C\x3\x2\x2\x2\x43E\x87\x3\x2\x2\x2\x43F\x442\x5\x8CG\x2"+
		"\x440\x442\x5\x8A\x46\x2\x441\x43F\x3\x2\x2\x2\x441\x440\x3\x2\x2\x2\x442"+
		"\x89\x3\x2\x2\x2\x443\x4C3\a\x84\x2\x2\x444\x445\x5\x1A\xE\x2\x445\x446"+
		"\a\x84\x2\x2\x446\x4C3\x3\x2\x2\x2\x447\x448\a\x35\x2\x2\x448\x449\a\x7F"+
		"\x2\x2\x449\x44A\x5\x1A\xE\x2\x44A\x44B\a\x80\x2\x2\x44B\x44E\x5\x96L"+
		"\x2\x44C\x44D\a%\x2\x2\x44D\x44F\x5\x96L\x2\x44E\x44C\x3\x2\x2\x2\x44E"+
		"\x44F\x3\x2\x2\x2\x44F\x4C3\x3\x2\x2\x2\x450\x451\a^\x2\x2\x451\x452\a"+
		"\x7F\x2\x2\x452\x453\x5\x1A\xE\x2\x453\x454\a\x80\x2\x2\x454\x458\a{\x2"+
		"\x2\x455\x457\x5\x98M\x2\x456\x455\x3\x2\x2\x2\x457\x45A\x3\x2\x2\x2\x458"+
		"\x456\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2\x459\x45B\x3\x2\x2\x2\x45A\x458"+
		"\x3\x2\x2\x2\x45B\x45C\a|\x2\x2\x45C\x4C3\x3\x2\x2\x2\x45D\x45E\ao\x2"+
		"\x2\x45E\x45F\a\x7F\x2\x2\x45F\x460\x5\x1A\xE\x2\x460\x461\a\x80\x2\x2"+
		"\x461\x462\x5\x88\x45\x2\x462\x4C3\x3\x2\x2\x2\x463\x464\a\"\x2\x2\x464"+
		"\x465\x5\x88\x45\x2\x465\x466\ao\x2\x2\x466\x467\a\x7F\x2\x2\x467\x468"+
		"\x5\x1A\xE\x2\x468\x469\a\x80\x2\x2\x469\x46A\a\x84\x2\x2\x46A\x4C3\x3"+
		"\x2\x2\x2\x46B\x46C\a/\x2\x2\x46C\x46E\a\x7F\x2\x2\x46D\x46F\x5\x9EP\x2"+
		"\x46E\x46D\x3\x2\x2\x2\x46E\x46F\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470"+
		"\x472\a\x84\x2\x2\x471\x473\x5\x1A\xE\x2\x472\x471\x3\x2\x2\x2\x472\x473"+
		"\x3\x2\x2\x2\x473\x474\x3\x2\x2\x2\x474\x476\a\x84\x2\x2\x475\x477\x5"+
		"\xA0Q\x2\x476\x475\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477\x478\x3\x2\x2"+
		"\x2\x478\x479\a\x80\x2\x2\x479\x4C3\x5\x88\x45\x2\x47A\x47B\a\x30\x2\x2"+
		"\x47B\x47C\a\x7F\x2\x2\x47C\x47D\x5\x6\x4\x2\x47D\x47E\x5\x190\xC9\x2"+
		"\x47E\x47F\a\x37\x2\x2\x47F\x480\x5\x1A\xE\x2\x480\x481\a\x80\x2\x2\x481"+
		"\x482\x5\x88\x45\x2\x482\x4C3\x3\x2\x2\x2\x483\x484\a\x14\x2\x2\x484\x4C3"+
		"\a\x84\x2\x2\x485\x486\a\x1D\x2\x2\x486\x4C3\a\x84\x2\x2\x487\x48C\a\x33"+
		"\x2\x2\x488\x48D\x5\x190\xC9\x2\x489\x48A\a\x17\x2\x2\x48A\x48D\x5\x1A"+
		"\xE\x2\x48B\x48D\a\x1F\x2\x2\x48C\x488\x3\x2\x2\x2\x48C\x489\x3\x2\x2"+
		"\x2\x48C\x48B\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x4C3\a\x84\x2\x2"+
		"\x48F\x491\aS\x2\x2\x490\x492\x5\x1A\xE\x2\x491\x490\x3\x2\x2\x2\x491"+
		"\x492\x3\x2\x2\x2\x492\x493\x3\x2\x2\x2\x493\x4C3\a\x84\x2\x2\x494\x496"+
		"\a`\x2\x2\x495\x497\x5\x1A\xE\x2\x496\x495\x3\x2\x2\x2\x496\x497\x3\x2"+
		"\x2\x2\x497\x498\x3\x2\x2\x2\x498\x4C3\a\x84\x2\x2\x499\x49A\a\x62\x2"+
		"\x2\x49A\x4A0\x5\x8CG\x2\x49B\x49D\x5\xA2R\x2\x49C\x49E\x5\xAAV\x2\x49D"+
		"\x49C\x3\x2\x2\x2\x49D\x49E\x3\x2\x2\x2\x49E\x4A1\x3\x2\x2\x2\x49F\x4A1"+
		"\x5\xAAV\x2\x4A0\x49B\x3\x2\x2\x2\x4A0\x49F\x3\x2\x2\x2\x4A1\x4C3\x3\x2"+
		"\x2\x2\x4A2\x4A3\a\x1A\x2\x2\x4A3\x4C3\x5\x8CG\x2\x4A4\x4A5\a\x66\x2\x2"+
		"\x4A5\x4C3\x5\x8CG\x2\x4A6\x4A7\a?\x2\x2\x4A7\x4A8\a\x7F\x2\x2\x4A8\x4A9"+
		"\x5\x1A\xE\x2\x4A9\x4AA\a\x80\x2\x2\x4AA\x4AB\x5\x88\x45\x2\x4AB\x4C3"+
		"\x3\x2\x2\x2\x4AC\x4AD\ai\x2\x2\x4AD\x4AE\a\x7F\x2\x2\x4AE\x4AF\x5\xAC"+
		"W\x2\x4AF\x4B0\a\x80\x2\x2\x4B0\x4B1\x5\x88\x45\x2\x4B1\x4C3\x3\x2\x2"+
		"\x2\x4B2\x4B6\ap\x2\x2\x4B3\x4B4\aS\x2\x2\x4B4\x4B7\x5\x1A\xE\x2\x4B5"+
		"\x4B7\a\x14\x2\x2\x4B6\x4B3\x3\x2\x2\x2\x4B6\x4B5\x3\x2\x2\x2\x4B7\x4B8"+
		"\x3\x2\x2\x2\x4B8\x4C3\a\x84\x2\x2\x4B9\x4BA\ag\x2\x2\x4BA\x4C3\x5\x8C"+
		"G\x2\x4BB\x4BC\a-\x2\x2\x4BC\x4BD\a\x7F\x2\x2\x4BD\x4BE\x5\x148\xA5\x2"+
		"\x4BE\x4BF\x5\x14A\xA6\x2\x4BF\x4C0\a\x80\x2\x2\x4C0\x4C1\x5\x88\x45\x2"+
		"\x4C1\x4C3\x3\x2\x2\x2\x4C2\x443\x3\x2\x2\x2\x4C2\x444\x3\x2\x2\x2\x4C2"+
		"\x447\x3\x2\x2\x2\x4C2\x450\x3\x2\x2\x2\x4C2\x45D\x3\x2\x2\x2\x4C2\x463"+
		"\x3\x2\x2\x2\x4C2\x46B\x3\x2\x2\x2\x4C2\x47A\x3\x2\x2\x2\x4C2\x483\x3"+
		"\x2\x2\x2\x4C2\x485\x3\x2\x2\x2\x4C2\x487\x3\x2\x2\x2\x4C2\x48F\x3\x2"+
		"\x2\x2\x4C2\x494\x3\x2\x2\x2\x4C2\x499\x3\x2\x2\x2\x4C2\x4A2\x3\x2\x2"+
		"\x2\x4C2\x4A4\x3\x2\x2\x2\x4C2\x4A6\x3\x2\x2\x2\x4C2\x4AC\x3\x2\x2\x2"+
		"\x4C2\x4B2\x3\x2\x2\x2\x4C2\x4B9\x3\x2\x2\x2\x4C2\x4BB\x3\x2\x2\x2\x4C3"+
		"\x8B\x3\x2\x2\x2\x4C4\x4C6\a{\x2\x2\x4C5\x4C7\x5\x9CO\x2\x4C6\x4C5\x3"+
		"\x2\x2\x2\x4C6\x4C7\x3\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4C9\a|\x2"+
		"\x2\x4C9\x8D\x3\x2\x2\x2\x4CA\x4CB\x5\x6\x4\x2\x4CB\x4D0\x5\x90I\x2\x4CC"+
		"\x4CD\a\x82\x2\x2\x4CD\x4CF\x5\x90I\x2\x4CE\x4CC\x3\x2\x2\x2\x4CF\x4D2"+
		"\x3\x2\x2\x2\x4D0\x4CE\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x8F\x3\x2"+
		"\x2\x2\x4D2\x4D0\x3\x2\x2\x2\x4D3\x4D6\x5\x190\xC9\x2\x4D4\x4D5\a\x8F"+
		"\x2\x2\x4D5\x4D7\x5\x92J\x2\x4D6\x4D4\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2"+
		"\x4D7\x91\x3\x2\x2\x2\x4D8\x4DC\x5\x1A\xE\x2\x4D9\x4DC\x5\x122\x92\x2"+
		"\x4DA\x4DC\x5\x152\xAA\x2\x4DB\x4D8\x3\x2\x2\x2\x4DB\x4D9\x3\x2\x2\x2"+
		"\x4DB\x4DA\x3\x2\x2\x2\x4DC\x93\x3\x2\x2\x2\x4DD\x4DE\a\x1C\x2\x2\x4DE"+
		"\x4DF\x5\x6\x4\x2\x4DF\x4E0\x5\xE6t\x2\x4E0\x95\x3\x2\x2\x2\x4E1\x4E4"+
		"\x5\x8CG\x2\x4E2\x4E4\x5\x8A\x46\x2\x4E3\x4E1\x3\x2\x2\x2\x4E3\x4E2\x3"+
		"\x2\x2\x2\x4E4\x97\x3\x2\x2\x2\x4E5\x4E7\x5\x9AN\x2\x4E6\x4E5\x3\x2\x2"+
		"\x2\x4E7\x4E8\x3\x2\x2\x2\x4E8\x4E6\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2"+
		"\x4E9\x4EA\x3\x2\x2\x2\x4EA\x4EB\x5\x9CO\x2\x4EB\x99\x3\x2\x2\x2\x4EC"+
		"\x4ED\a\x17\x2\x2\x4ED\x4EE\x5\x1A\xE\x2\x4EE\x4EF\a\x83\x2\x2\x4EF\x4F3"+
		"\x3\x2\x2\x2\x4F0\x4F1\a\x1F\x2\x2\x4F1\x4F3\a\x83\x2\x2\x4F2\x4EC\x3"+
		"\x2\x2\x2\x4F2\x4F0\x3\x2\x2\x2\x4F3\x9B\x3\x2\x2\x2\x4F4\x4F6\x5\x86"+
		"\x44\x2\x4F5\x4F4\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7\x4F5\x3\x2\x2"+
		"\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8\x9D\x3\x2\x2\x2\x4F9\x503\x5\x8EH\x2\x4FA"+
		"\x4FF\x5\x1A\xE\x2\x4FB\x4FC\a\x82\x2\x2\x4FC\x4FE\x5\x1A\xE\x2\x4FD\x4FB"+
		"\x3\x2\x2\x2\x4FE\x501\x3\x2\x2\x2\x4FF\x4FD\x3\x2\x2\x2\x4FF\x500\x3"+
		"\x2\x2\x2\x500\x503\x3\x2\x2\x2\x501\x4FF\x3\x2\x2\x2\x502\x4F9\x3\x2"+
		"\x2\x2\x502\x4FA\x3\x2\x2\x2\x503\x9F\x3\x2\x2\x2\x504\x509\x5\x1A\xE"+
		"\x2\x505\x506\a\x82\x2\x2\x506\x508\x5\x1A\xE\x2\x507\x505\x3\x2\x2\x2"+
		"\x508\x50B\x3\x2\x2\x2\x509\x507\x3\x2\x2\x2\x509\x50A\x3\x2\x2\x2\x50A"+
		"\xA1\x3\x2\x2\x2\x50B\x509\x3\x2\x2\x2\x50C\x510\x5\xA4S\x2\x50D\x50F"+
		"\x5\xA4S\x2\x50E\x50D\x3\x2\x2\x2\x50F\x512\x3\x2\x2\x2\x510\x50E\x3\x2"+
		"\x2\x2\x510\x511\x3\x2\x2\x2\x511\x514\x3\x2\x2\x2\x512\x510\x3\x2\x2"+
		"\x2\x513\x515\x5\xA6T\x2\x514\x513\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515"+
		"\x518\x3\x2\x2\x2\x516\x518\x5\xA6T\x2\x517\x50C\x3\x2\x2\x2\x517\x516"+
		"\x3\x2\x2\x2\x518\xA3\x3\x2\x2\x2\x519\x51A\a\x18\x2\x2\x51A\x51B\a\x7F"+
		"\x2\x2\x51B\x51D\x5\x12\n\x2\x51C\x51E\x5\x190\xC9\x2\x51D\x51C\x3\x2"+
		"\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x521\a\x80\x2"+
		"\x2\x520\x522\x5\xA8U\x2\x521\x520\x3\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522"+
		"\x523\x3\x2\x2\x2\x523\x524\x5\x8CG\x2\x524\xA5\x3\x2\x2\x2\x525\x527"+
		"\a\x18\x2\x2\x526\x528\x5\xA8U\x2\x527\x526\x3\x2\x2\x2\x527\x528\x3\x2"+
		"\x2\x2\x528\x529\x3\x2\x2\x2\x529\x52A\x5\x8CG\x2\x52A\xA7\x3\x2\x2\x2"+
		"\x52B\x52C\am\x2\x2\x52C\x52D\a\x7F\x2\x2\x52D\x52E\x5\x1A\xE\x2\x52E"+
		"\x52F\a\x80\x2\x2\x52F\xA9\x3\x2\x2\x2\x530\x531\a,\x2\x2\x531\x532\x5"+
		"\x8CG\x2\x532\xAB\x3\x2\x2\x2\x533\x536\x5\x8EH\x2\x534\x536\x5\x1A\xE"+
		"\x2\x535\x533\x3\x2\x2\x2\x535\x534\x3\x2\x2\x2\x536\xAD\x3\x2\x2\x2\x537"+
		"\x538\a\x42\x2\x2\x538\x539\x5\xB0Y\x2\x539\x53B\x5\xB2Z\x2\x53A\x53C"+
		"\a\x84\x2\x2\x53B\x53A\x3\x2\x2\x2\x53B\x53C\x3\x2\x2\x2\x53C\xAF\x3\x2"+
		"\x2\x2\x53D\x542\x5\x190\xC9\x2\x53E\x53F\a\x81\x2\x2\x53F\x541\x5\x190"+
		"\xC9\x2\x540\x53E\x3\x2\x2\x2\x541\x544\x3\x2\x2\x2\x542\x540\x3\x2\x2"+
		"\x2\x542\x543\x3\x2\x2\x2\x543\xB1\x3\x2\x2\x2\x544\x542\x3\x2\x2\x2\x545"+
		"\x547\a{\x2\x2\x546\x548\x5\xB4[\x2\x547\x546\x3\x2\x2\x2\x547\x548\x3"+
		"\x2\x2\x2\x548\x54A\x3\x2\x2\x2\x549\x54B\x5\xB8]\x2\x54A\x549\x3\x2\x2"+
		"\x2\x54A\x54B\x3\x2\x2\x2\x54B\x54D\x3\x2\x2\x2\x54C\x54E\x5\xBC_\x2\x54D"+
		"\x54C\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x550"+
		"\a|\x2\x2\x550\xB3\x3\x2\x2\x2\x551\x553\x5\xB6\\\x2\x552\x551\x3\x2\x2"+
		"\x2\x553\x554\x3\x2\x2\x2\x554\x552\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2"+
		"\x555\xB5\x3\x2\x2\x2\x556\x557\a*\x2\x2\x557\x558\a\f\x2\x2\x558\x559"+
		"\x5\x190\xC9\x2\x559\x55A\a\x84\x2\x2\x55A\xB7\x3\x2\x2\x2\x55B\x55D\x5"+
		"\xBA^\x2\x55C\x55B\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x55C\x3\x2\x2"+
		"\x2\x55E\x55F\x3\x2\x2\x2\x55F\xB9\x3\x2\x2\x2\x560\x561\ai\x2\x2\x561"+
		"\x562\x5\x190\xC9\x2\x562\x563\a\x8F\x2\x2\x563\x564\x5\x4\x3\x2\x564"+
		"\x565\a\x84\x2\x2\x565\x570\x3\x2\x2\x2\x566\x567\ai\x2\x2\x567\x568\x5"+
		"\x4\x3\x2\x568\x569\a\x84\x2\x2\x569\x570\x3\x2\x2\x2\x56A\x56B\ai\x2"+
		"\x2\x56B\x56C\a[\x2\x2\x56C\x56D\x5\x4\x3\x2\x56D\x56E\a\x84\x2\x2\x56E"+
		"\x570\x3\x2\x2\x2\x56F\x560\x3\x2\x2\x2\x56F\x566\x3\x2\x2\x2\x56F\x56A"+
		"\x3\x2\x2\x2\x570\xBB\x3\x2\x2\x2\x571\x573\x5\xBE`\x2\x572\x571\x3\x2"+
		"\x2\x2\x573\x574\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x574\x575\x3\x2\x2"+
		"\x2\x575\xBD\x3\x2\x2\x2\x576\x579\x5\xAEX\x2\x577\x579\x5\xC0\x61\x2"+
		"\x578\x576\x3\x2\x2\x2\x578\x577\x3\x2\x2\x2\x579\xBF\x3\x2\x2\x2\x57A"+
		"\x57C\x5\x13C\x9F\x2\x57B\x57A\x3\x2\x2\x2\x57B\x57C\x3\x2\x2\x2\x57C"+
		"\x57E\x3\x2\x2\x2\x57D\x57F\x5\xDEp\x2\x57E\x57D\x3\x2\x2\x2\x57E\x57F"+
		"\x3\x2\x2\x2\x57F\x585\x3\x2\x2\x2\x580\x586\x5\x16C\xB7\x2\x581\x586"+
		"\x5\x16E\xB8\x2\x582\x586\x5\x170\xB9\x2\x583\x586\x5\x172\xBA\x2\x584"+
		"\x586\x5\x174\xBB\x2\x585\x580\x3\x2\x2\x2\x585\x581\x3\x2\x2\x2\x585"+
		"\x582\x3\x2\x2\x2\x585\x583\x3\x2\x2\x2\x585\x584\x3\x2\x2\x2\x586\xC1"+
		"\x3\x2\x2\x2\x587\x588\x5\x190\xC9\x2\x588\x589\a\x93\x2\x2\x589\x58B"+
		"\x5\x190\xC9\x2\x58A\x58C\x5\x14\v\x2\x58B\x58A\x3\x2\x2\x2\x58B\x58C"+
		"\x3\x2\x2\x2\x58C\xC3\x3\x2\x2\x2\x58D\x58E\a\x90\x2\x2\x58E\x593\x5\xC6"+
		"\x64\x2\x58F\x590\a\x82\x2\x2\x590\x592\x5\xC6\x64\x2\x591\x58F\x3\x2"+
		"\x2\x2\x592\x595\x3\x2\x2\x2\x593\x591\x3\x2\x2\x2\x593\x594\x3\x2\x2"+
		"\x2\x594\x596\x3\x2\x2\x2\x595\x593\x3\x2\x2\x2\x596\x597\a\x91\x2\x2"+
		"\x597\xC5\x3\x2\x2\x2\x598\x59A\x5\x13C\x9F\x2\x599\x598\x3\x2\x2\x2\x599"+
		"\x59A\x3\x2\x2\x2\x59A\x59B\x3\x2\x2\x2\x59B\x59C\x5\x190\xC9\x2\x59C"+
		"\xC7\x3\x2\x2\x2\x59D\x59E\a\x83\x2\x2\x59E\x5A3\x5\x12\n\x2\x59F\x5A0"+
		"\a\x82\x2\x2\x5A0\x5A2\x5\x4\x3\x2\x5A1\x59F\x3\x2\x2\x2\x5A2\x5A5\x3"+
		"\x2\x2\x2\x5A3\x5A1\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\xC9\x3\x2\x2"+
		"\x2\x5A5\x5A3\x3\x2\x2\x2\x5A6\x5AB\x5\x4\x3\x2\x5A7\x5A8\a\x82\x2\x2"+
		"\x5A8\x5AA\x5\x4\x3\x2\x5A9\x5A7\x3\x2\x2\x2\x5AA\x5AD\x3\x2\x2\x2\x5AB"+
		"\x5A9\x3\x2\x2\x2\x5AB\x5AC\x3\x2\x2\x2\x5AC\xCB\x3\x2\x2\x2\x5AD\x5AB"+
		"\x3\x2\x2\x2\x5AE\x5B0\x5\xCEh\x2\x5AF\x5AE\x3\x2\x2\x2\x5B0\x5B1\x3\x2"+
		"\x2\x2\x5B1\x5AF\x3\x2\x2\x2\x5B1\x5B2\x3\x2\x2\x2\x5B2\xCD\x3\x2\x2\x2"+
		"\x5B3\x5B4\an\x2\x2\x5B4\x5B5\x5\x190\xC9\x2\x5B5\x5B6\a\x83\x2\x2\x5B6"+
		"\x5B7\x5\xD0i\x2\x5B7\xCF\x3\x2\x2\x2\x5B8\x5C3\x5\xD6l\x2\x5B9\x5BC\x5"+
		"\xD2j\x2\x5BA\x5BB\a\x82\x2\x2\x5BB\x5BD\x5\xD4k\x2\x5BC\x5BA\x3\x2\x2"+
		"\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5C0\x3\x2\x2\x2\x5BE\x5BF\a\x82\x2\x2"+
		"\x5BF\x5C1\x5\xD6l\x2\x5C0\x5BE\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1"+
		"\x5C3\x3\x2\x2\x2\x5C2\x5B8\x3\x2\x2\x2\x5C2\x5B9\x3\x2\x2\x2\x5C3\xD1"+
		"\x3\x2\x2\x2\x5C4\x5C8\x5\x12\n\x2\x5C5\x5C8\a\x1B\x2\x2\x5C6\x5C8\a]"+
		"\x2\x2\x5C7\x5C4\x3\x2\x2\x2\x5C7\x5C5\x3\x2\x2\x2\x5C7\x5C6\x3\x2\x2"+
		"\x2\x5C8\xD3\x3\x2\x2\x2\x5C9\x5CE\x5\x4\x3\x2\x5CA\x5CB\a\x82\x2\x2\x5CB"+
		"\x5CD\x5\x4\x3\x2\x5CC\x5CA\x3\x2\x2\x2\x5CD\x5D0\x3\x2\x2\x2\x5CE\x5CC"+
		"\x3\x2\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\xD5\x3\x2\x2\x2\x5D0\x5CE\x3\x2"+
		"\x2\x2\x5D1\x5D2\a\x43\x2\x2\x5D2\x5D3\a\x7F\x2\x2\x5D3\x5D4\a\x80\x2"+
		"\x2\x5D4\xD7\x3\x2\x2\x2\x5D5\x5D7\a{\x2\x2\x5D6\x5D8\x5\xDAn\x2\x5D7"+
		"\x5D6\x3\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x5DA"+
		"\a|\x2\x2\x5DA\xD9\x3\x2\x2\x2\x5DB\x5DD\x5\xDCo\x2\x5DC\x5DB\x3\x2\x2"+
		"\x2\x5DD\x5DE\x3\x2\x2\x2\x5DE\x5DC\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2"+
		"\x5DF\xDB\x3\x2\x2\x2\x5E0\x5E2\x5\x13C\x9F\x2\x5E1\x5E0\x3\x2\x2\x2\x5E1"+
		"\x5E2\x3\x2\x2\x2\x5E2\x5E4\x3\x2\x2\x2\x5E3\x5E5\x5\xDEp\x2\x5E4\x5E3"+
		"\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E8\x3\x2\x2\x2\x5E6\x5E9\x5"+
		"\xE2r\x2\x5E7\x5E9\x5\x180\xC1\x2\x5E8\x5E6\x3\x2\x2\x2\x5E8\x5E7\x3\x2"+
		"\x2\x2\x5E9\xDD\x3\x2\x2\x2\x5EA\x5EC\x5\xE0q\x2\x5EB\x5EA\x3\x2\x2\x2"+
		"\x5EC\x5ED\x3\x2\x2\x2\x5ED\x5EB\x3\x2\x2\x2\x5ED\x5EE\x3\x2\x2\x2\x5EE"+
		"\xDF\x3\x2\x2\x2\x5EF\x5F0\t\v\x2\x2\x5F0\xE1\x3\x2\x2\x2\x5F1\x605\x5"+
		"\x17C\xBF\x2\x5F2\x605\x5\xE4s\x2\x5F3\x605\x5\x176\xBC\x2\x5F4\x5FA\x5"+
		"\x112\x8A\x2\x5F5\x5FB\x5\x116\x8C\x2\x5F6\x5F7\x5\x154\xAB\x2\x5F7\x5F8"+
		"\x5\x1A\xE\x2\x5F8\x5F9\a\x84\x2\x2\x5F9\x5FB\x3\x2\x2\x2\x5FA\x5F5\x3"+
		"\x2\x2\x2\x5FA\x5F6\x3\x2\x2\x2\x5FB\x605\x3\x2\x2\x2\x5FC\x605\x5\x182"+
		"\xC2\x2\x5FD\x5FE\ak\x2\x2\x5FE\x605\x5\x184\xC3\x2\x5FF\x605\x5\x16C"+
		"\xB7\x2\x600\x605\x5\x16E\xB8\x2\x601\x605\x5\x170\xB9\x2\x602\x605\x5"+
		"\x172\xBA\x2\x603\x605\x5\x174\xBB\x2\x604\x5F1\x3\x2\x2\x2\x604\x5F2"+
		"\x3\x2\x2\x2\x604\x5F3\x3\x2\x2\x2\x604\x5F4\x3\x2\x2\x2\x604\x5FC\x3"+
		"\x2\x2\x2\x604\x5FD\x3\x2\x2\x2\x604\x5FF\x3\x2\x2\x2\x604\x600\x3\x2"+
		"\x2\x2\x604\x601\x3\x2\x2\x2\x604\x602\x3\x2\x2\x2\x604\x603\x3\x2\x2"+
		"\x2\x605\xE3\x3\x2\x2\x2\x606\x610\x5\x6\x4\x2\x607\x608\x5\x4\x3\x2\x608"+
		"\x609\a\x81\x2\x2\x609\x60A\x5\x17E\xC0\x2\x60A\x611\x3\x2\x2\x2\x60B"+
		"\x611\x5\x184\xC3\x2\x60C\x611\x5\x17A\xBE\x2\x60D\x611\x5\x17E\xC0\x2"+
		"\x60E\x611\x5\x188\xC5\x2\x60F\x611\x5\x178\xBD\x2\x610\x607\x3\x2\x2"+
		"\x2\x610\x60B\x3\x2\x2\x2\x610\x60C\x3\x2\x2\x2\x610\x60D\x3\x2\x2\x2"+
		"\x610\x60E\x3\x2\x2\x2\x610\x60F\x3\x2\x2\x2\x611\xE5\x3\x2\x2\x2\x612"+
		"\x617\x5\xE8u\x2\x613\x614\a\x82\x2\x2\x614\x616\x5\xE8u\x2\x615\x613"+
		"\x3\x2\x2\x2\x616\x619\x3\x2\x2\x2\x617\x615\x3\x2\x2\x2\x617\x618\x3"+
		"\x2\x2\x2\x618\xE7\x3\x2\x2\x2\x619\x617\x3\x2\x2\x2\x61A\x61B\x5\x190"+
		"\xC9\x2\x61B\x61C\a\x8F\x2\x2\x61C\x61D\x5\x1A\xE\x2\x61D\xE9\x3\x2\x2"+
		"\x2\x61E\x623\x5\xECw\x2\x61F\x620\a\x82\x2\x2\x620\x622\x5\xECw\x2\x621"+
		"\x61F\x3\x2\x2\x2\x622\x625\x3\x2\x2\x2\x623\x621\x3\x2\x2\x2\x623\x624"+
		"\x3\x2\x2\x2\x624\xEB\x3\x2\x2\x2\x625\x623\x3\x2\x2\x2\x626\x629\x5\x190"+
		"\xC9\x2\x627\x628\a\x8F\x2\x2\x628\x62A\x5\xEEx\x2\x629\x627\x3\x2\x2"+
		"\x2\x629\x62A\x3\x2\x2\x2\x62A\xED\x3\x2\x2\x2\x62B\x62E\x5\x1A\xE\x2"+
		"\x62C\x62E\x5\x122\x92\x2\x62D\x62B\x3\x2\x2\x2\x62D\x62C\x3\x2\x2\x2"+
		"\x62E\xEF\x3\x2\x2\x2\x62F\x632\x5\x6\x4\x2\x630\x632\ak\x2\x2\x631\x62F"+
		"\x3\x2\x2\x2\x631\x630\x3\x2\x2\x2\x632\xF1\x3\x2\x2\x2\x633\x634\x5\x4"+
		"\x3\x2\x634\xF3\x3\x2\x2\x2\x635\x638\x5\x8CG\x2\x636\x638\a\x84\x2\x2"+
		"\x637\x635\x3\x2\x2\x2\x637\x636\x3\x2\x2\x2\x638\xF5\x3\x2\x2\x2\x639"+
		"\x640\x5\xFE\x80\x2\x63A\x63D\x5\xF8}\x2\x63B\x63C\a\x82\x2\x2\x63C\x63E"+
		"\x5\xFE\x80\x2\x63D\x63B\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E\x640\x3"+
		"\x2\x2\x2\x63F\x639\x3\x2\x2\x2\x63F\x63A\x3\x2\x2\x2\x640\xF7\x3\x2\x2"+
		"\x2\x641\x646\x5\xFA~\x2\x642\x643\a\x82\x2\x2\x643\x645\x5\xFA~\x2\x644"+
		"\x642\x3\x2\x2\x2\x645\x648\x3\x2\x2\x2\x646\x644\x3\x2\x2\x2\x646\x647"+
		"\x3\x2\x2\x2\x647\xF9\x3\x2\x2\x2\x648\x646\x3\x2\x2\x2\x649\x64B\x5\x13C"+
		"\x9F\x2\x64A\x649\x3\x2\x2\x2\x64A\x64B\x3\x2\x2\x2\x64B\x64D\x3\x2\x2"+
		"\x2\x64C\x64E\x5\xFC\x7F\x2\x64D\x64C\x3\x2\x2\x2\x64D\x64E\x3\x2\x2\x2"+
		"\x64E\x64F\x3\x2\x2\x2\x64F\x652\x5\x18A\xC6\x2\x650\x652\a\r\x2\x2\x651"+
		"\x64A\x3\x2\x2\x2\x651\x650\x3\x2\x2\x2\x652\xFB\x3\x2\x2\x2\x653\x654"+
		"\t\f\x2\x2\x654\xFD\x3\x2\x2\x2\x655\x657\x5\x13C\x9F\x2\x656\x655\x3"+
		"\x2\x2\x2\x656\x657\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2\x658\x659\aK\x2"+
		"\x2\x659\x65A\x5\x11E\x90\x2\x65A\x65B\x5\x190\xC9\x2\x65B\xFF\x3\x2\x2"+
		"\x2\x65C\x65E\x5\x13C\x9F\x2\x65D\x65C\x3\x2\x2\x2\x65D\x65E\x3\x2\x2"+
		"\x2\x65E\x660\x3\x2\x2\x2\x65F\x661\x5\x106\x84\x2\x660\x65F\x3\x2\x2"+
		"\x2\x660\x661\x3\x2\x2\x2\x661\x66C\x3\x2\x2\x2\x662\x663\a\x32\x2\x2"+
		"\x663\x665\x5\x108\x85\x2\x664\x666\x5\x104\x83\x2\x665\x664\x3\x2\x2"+
		"\x2\x665\x666\x3\x2\x2\x2\x666\x66D\x3\x2\x2\x2\x667\x668\aW\x2\x2\x668"+
		"\x66A\x5\x108\x85\x2\x669\x66B\x5\x102\x82\x2\x66A\x669\x3\x2\x2\x2\x66A"+
		"\x66B\x3\x2\x2\x2\x66B\x66D\x3\x2\x2\x2\x66C\x662\x3\x2\x2\x2\x66C\x667"+
		"\x3\x2\x2\x2\x66D\x101\x3\x2\x2\x2\x66E\x670\x5\x13C\x9F\x2\x66F\x66E"+
		"\x3\x2\x2\x2\x66F\x670\x3\x2\x2\x2\x670\x672\x3\x2\x2\x2\x671\x673\x5"+
		"\x106\x84\x2\x672\x671\x3\x2\x2\x2\x672\x673\x3\x2\x2\x2\x673\x674\x3"+
		"\x2\x2\x2\x674\x675\a\x32\x2\x2\x675\x676\x5\x108\x85\x2\x676\x103\x3"+
		"\x2\x2\x2\x677\x679\x5\x13C\x9F\x2\x678\x677\x3\x2\x2\x2\x678\x679\x3"+
		"\x2\x2\x2\x679\x67B\x3\x2\x2\x2\x67A\x67C\x5\x106\x84\x2\x67B\x67A\x3"+
		"\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67D\x3\x2\x2\x2\x67D\x67E\aW\x2"+
		"\x2\x67E\x67F\x5\x108\x85\x2\x67F\x105\x3\x2\x2\x2\x680\x688\aN\x2\x2"+
		"\x681\x688\a:\x2\x2\x682\x688\aM\x2\x2\x683\x684\aN\x2\x2\x684\x688\a"+
		":\x2\x2\x685\x686\a:\x2\x2\x686\x688\aN\x2\x2\x687\x680\x3\x2\x2\x2\x687"+
		"\x681\x3\x2\x2\x2\x687\x682\x3\x2\x2\x2\x687\x683\x3\x2\x2\x2\x687\x685"+
		"\x3\x2\x2\x2\x688\x107\x3\x2\x2\x2\x689\x68C\x5\x8CG\x2\x68A\x68C\a\x84"+
		"\x2\x2\x68B\x689\x3\x2\x2\x2\x68B\x68A\x3\x2\x2\x2\x68C\x109\x3\x2\x2"+
		"\x2\x68D\x68F\x5\x13C\x9F\x2\x68E\x68D\x3\x2\x2\x2\x68E\x68F\x3\x2\x2"+
		"\x2\x68F\x698\x3\x2\x2\x2\x690\x691\a\v\x2\x2\x691\x692\x5\x8CG\x2\x692"+
		"\x693\x5\x10E\x88\x2\x693\x699\x3\x2\x2\x2\x694\x695\aR\x2\x2\x695\x696"+
		"\x5\x8CG\x2\x696\x697\x5\x10C\x87\x2\x697\x699\x3\x2\x2\x2\x698\x690\x3"+
		"\x2\x2\x2\x698\x694\x3\x2\x2\x2\x699\x10B\x3\x2\x2\x2\x69A\x69C\x5\x13C"+
		"\x9F\x2\x69B\x69A\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2\x69C\x69D\x3\x2\x2"+
		"\x2\x69D\x69E\a\v\x2\x2\x69E\x69F\x5\x8CG\x2\x69F\x10D\x3\x2\x2\x2\x6A0"+
		"\x6A2\x5\x13C\x9F\x2\x6A1\x6A0\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2"+
		"\x6A3\x3\x2\x2\x2\x6A3\x6A4\aR\x2\x2\x6A4\x6A5\x5\x8CG\x2\x6A5\x10F\x3"+
		"\x2\x2\x2\x6A6\x6BD\a\x85\x2\x2\x6A7\x6BD\a\x86\x2\x2\x6A8\x6BD\a\x8D"+
		"\x2\x2\x6A9\x6BD\a\x8E\x2\x2\x6AA\x6BD\a\x95\x2\x2\x6AB\x6BD\a\x96\x2"+
		"\x2\x6AC\x6BD\a\x61\x2\x2\x6AD\x6BD\a+\x2\x2\x6AE\x6BD\a\x87\x2\x2\x6AF"+
		"\x6BD\a\x88\x2\x2\x6B0\x6BD\a\x89\x2\x2\x6B1\x6BD\a\x8A\x2\x2\x6B2\x6BD"+
		"\a\x8B\x2\x2\x6B3\x6BD\a\x8C\x2\x2\x6B4\x6BD\a\xA6\x2\x2\x6B5\x6BD\x5"+
		"\x156\xAC\x2\x6B6\x6BD\a\x9A\x2\x2\x6B7\x6BD\a\x9B\x2\x2\x6B8\x6BD\a\x91"+
		"\x2\x2\x6B9\x6BD\a\x90\x2\x2\x6BA\x6BD\a\x9D\x2\x2\x6BB\x6BD\a\x9C\x2"+
		"\x2\x6BC\x6A6\x3\x2\x2\x2\x6BC\x6A7\x3\x2\x2\x2\x6BC\x6A8\x3\x2\x2\x2"+
		"\x6BC\x6A9\x3\x2\x2\x2\x6BC\x6AA\x3\x2\x2\x2\x6BC\x6AB\x3\x2\x2\x2\x6BC"+
		"\x6AC\x3\x2\x2\x2\x6BC\x6AD\x3\x2\x2\x2\x6BC\x6AE\x3\x2\x2\x2\x6BC\x6AF"+
		"\x3\x2\x2\x2\x6BC\x6B0\x3\x2\x2\x2\x6BC\x6B1\x3\x2\x2\x2\x6BC\x6B2\x3"+
		"\x2\x2\x2\x6BC\x6B3\x3\x2\x2\x2\x6BC\x6B4\x3\x2\x2\x2\x6BC\x6B5\x3\x2"+
		"\x2\x2\x6BC\x6B6\x3\x2\x2\x2\x6BC\x6B7\x3\x2\x2\x2\x6BC\x6B8\x3\x2\x2"+
		"\x2\x6BC\x6B9\x3\x2\x2\x2\x6BC\x6BA\x3\x2\x2\x2\x6BC\x6BB\x3\x2\x2\x2"+
		"\x6BD\x111\x3\x2\x2\x2\x6BE\x6BF\t\r\x2\x2\x6BF\x6C0\aG\x2\x2\x6C0\x6C1"+
		"\x5\x6\x4\x2\x6C1\x6C2\a\x7F\x2\x2\x6C2\x6C3\x5\x18A\xC6\x2\x6C3\x6C4"+
		"\a\x80\x2\x2\x6C4\x113\x3\x2\x2\x2\x6C5\x6C6\a\x83\x2\x2\x6C6\x6C7\t\xE"+
		"\x2\x2\x6C7\x6C9\a\x7F\x2\x2\x6C8\x6CA\x5\x16\f\x2\x6C9\x6C8\x3\x2\x2"+
		"\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CC\a\x80\x2\x2"+
		"\x6CC\x115\x3\x2\x2\x2\x6CD\x6D0\x5\x8CG\x2\x6CE\x6D0\a\x84\x2\x2\x6CF"+
		"\x6CD\x3\x2\x2\x2\x6CF\x6CE\x3\x2\x2\x2\x6D0\x117\x3\x2\x2\x2\x6D1\x6D2"+
		"\a\x83\x2\x2\x6D2\x6D3\x5\xCA\x66\x2\x6D3\x119\x3\x2\x2\x2\x6D4\x6D8\a"+
		"{\x2\x2\x6D5\x6D7\x5\x11C\x8F\x2\x6D6\x6D5\x3\x2\x2\x2\x6D7\x6DA\x3\x2"+
		"\x2\x2\x6D8\x6D6\x3\x2\x2\x2\x6D8\x6D9\x3\x2\x2\x2\x6D9\x6DB\x3\x2\x2"+
		"\x2\x6DA\x6D8\x3\x2\x2\x2\x6DB\x6DC\a|\x2\x2\x6DC\x11B\x3\x2\x2\x2\x6DD"+
		"\x6DF\x5\x13C\x9F\x2\x6DE\x6DD\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF"+
		"\x6E1\x3\x2\x2\x2\x6E0\x6E2\x5\xDEp\x2\x6E1\x6E0\x3\x2\x2\x2\x6E1\x6E2"+
		"\x3\x2\x2\x2\x6E2\x6ED\x3\x2\x2\x2\x6E3\x6EE\x5\xE2r\x2\x6E4\x6E5\a-\x2"+
		"\x2\x6E5\x6E7\x5\x6\x4\x2\x6E6\x6E8\x5\x150\xA9\x2\x6E7\x6E6\x3\x2\x2"+
		"\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x6E7\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2"+
		"\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6EC\a\x84\x2\x2\x6EC\x6EE\x3\x2\x2\x2\x6ED"+
		"\x6E3\x3\x2\x2\x2\x6ED\x6E4\x3\x2\x2\x2\x6EE\x11D\x3\x2\x2\x2\x6EF\x6F7"+
		"\x5\b\x5\x2\x6F0\x6F2\t\xF\x2\x2\x6F1\x6F0\x3\x2\x2\x2\x6F2\x6F5\x3\x2"+
		"\x2\x2\x6F3\x6F1\x3\x2\x2\x2\x6F3\x6F4\x3\x2\x2\x2\x6F4\x6F6\x3\x2\x2"+
		"\x2\x6F5\x6F3\x3\x2\x2\x2\x6F6\x6F8\x5\x120\x91\x2\x6F7\x6F3\x3\x2\x2"+
		"\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\x6F7\x3\x2\x2\x2\x6F9\x6FA\x3\x2\x2\x2"+
		"\x6FA\x11F\x3\x2\x2\x2\x6FB\x6FF\a}\x2\x2\x6FC\x6FE\a\x82\x2\x2\x6FD\x6FC"+
		"\x3\x2\x2\x2\x6FE\x701\x3\x2\x2\x2\x6FF\x6FD\x3\x2\x2\x2\x6FF\x700\x3"+
		"\x2\x2\x2\x700\x702\x3\x2\x2\x2\x701\x6FF\x3\x2\x2\x2\x702\x703\a~\x2"+
		"\x2\x703\x121\x3\x2\x2\x2\x704\x710\a{\x2\x2\x705\x70A\x5\xEEx\x2\x706"+
		"\x707\a\x82\x2\x2\x707\x709\x5\xEEx\x2\x708\x706\x3\x2\x2\x2\x709\x70C"+
		"\x3\x2\x2\x2\x70A\x708\x3\x2\x2\x2\x70A\x70B\x3\x2\x2\x2\x70B\x70E\x3"+
		"\x2\x2\x2\x70C\x70A\x3\x2\x2\x2\x70D\x70F\a\x82\x2\x2\x70E\x70D\x3\x2"+
		"\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x711\x3\x2\x2\x2\x710\x705\x3\x2\x2"+
		"\x2\x710\x711\x3\x2\x2\x2\x711\x712\x3\x2\x2\x2\x712\x713\a|\x2\x2\x713"+
		"\x123\x3\x2\x2\x2\x714\x715\a\x90\x2\x2\x715\x71A\x5\x126\x94\x2\x716"+
		"\x717\a\x82\x2\x2\x717\x719\x5\x126\x94\x2\x718\x716\x3\x2\x2\x2\x719"+
		"\x71C\x3\x2\x2\x2\x71A\x718\x3\x2\x2\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71D"+
		"\x3\x2\x2\x2\x71C\x71A\x3\x2\x2\x2\x71D\x71E\a\x91\x2\x2\x71E\x125\x3"+
		"\x2\x2\x2\x71F\x721\x5\x13C\x9F\x2\x720\x71F\x3\x2\x2\x2\x720\x721\x3"+
		"\x2\x2\x2\x721\x723\x3\x2\x2\x2\x722\x724\x5\x128\x95\x2\x723\x722\x3"+
		"\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725\x726\x5\x190"+
		"\xC9\x2\x726\x127\x3\x2\x2\x2\x727\x728\t\x10\x2\x2\x728\x129\x3\x2\x2"+
		"\x2\x729\x72A\a\x83\x2\x2\x72A\x72B\x5\xCA\x66\x2\x72B\x12B\x3\x2\x2\x2"+
		"\x72C\x730\a{\x2\x2\x72D\x72F\x5\x12E\x98\x2\x72E\x72D\x3\x2\x2\x2\x72F"+
		"\x732\x3\x2\x2\x2\x730\x72E\x3\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731\x733"+
		"\x3\x2\x2\x2\x732\x730\x3\x2\x2\x2\x733\x734\a|\x2\x2\x734\x12D\x3\x2"+
		"\x2\x2\x735\x737\x5\x13C\x9F\x2\x736\x735\x3\x2\x2\x2\x736\x737\x3\x2"+
		"\x2\x2\x737\x739\x3\x2\x2\x2\x738\x73A\a\x43\x2\x2\x739\x738\x3\x2\x2"+
		"\x2\x739\x73A\x3\x2\x2\x2\x73A\x773\x3\x2\x2\x2\x73B\x73D\ag\x2\x2\x73C"+
		"\x73B\x3\x2\x2\x2\x73C\x73D\x3\x2\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E\x75A"+
		"\x5\x6\x4\x2\x73F\x741\x5\x190\xC9\x2\x740\x742\x5\xC4\x63\x2\x741\x740"+
		"\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743\x745\a\x7F"+
		"\x2\x2\x744\x746\x5\xF6|\x2\x745\x744\x3\x2\x2\x2\x745\x746\x3\x2\x2\x2"+
		"\x746\x747\x3\x2\x2\x2\x747\x749\a\x80\x2\x2\x748\x74A\x5\xCCg\x2\x749"+
		"\x748\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x74B\x3\x2\x2\x2\x74B\x74C"+
		"\a\x84\x2\x2\x74C\x75B\x3\x2\x2\x2\x74D\x74E\x5\x190\xC9\x2\x74E\x74F"+
		"\a{\x2\x2\x74F\x750\x5\x130\x99\x2\x750\x751\a|\x2\x2\x751\x75B\x3\x2"+
		"\x2\x2\x752\x753\a_\x2\x2\x753\x754\a}\x2\x2\x754\x755\x5\xF6|\x2\x755"+
		"\x756\a~\x2\x2\x756\x757\a{\x2\x2\x757\x758\x5\x130\x99\x2\x758\x759\a"+
		"|\x2\x2\x759\x75B\x3\x2\x2\x2\x75A\x73F\x3\x2\x2\x2\x75A\x74D\x3\x2\x2"+
		"\x2\x75A\x752\x3\x2\x2\x2\x75B\x774\x3\x2\x2\x2\x75C\x75E\ag\x2\x2\x75D"+
		"\x75C\x3\x2\x2\x2\x75D\x75E\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x760"+
		"\ak\x2\x2\x760\x762\x5\x190\xC9\x2\x761\x763\x5\xC4\x63\x2\x762\x761\x3"+
		"\x2\x2\x2\x762\x763\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x766\a\x7F"+
		"\x2\x2\x765\x767\x5\xF6|\x2\x766\x765\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2"+
		"\x767\x768\x3\x2\x2\x2\x768\x76A\a\x80\x2\x2\x769\x76B\x5\xCCg\x2\x76A"+
		"\x769\x3\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76D"+
		"\a\x84\x2\x2\x76D\x774\x3\x2\x2\x2\x76E\x76F\a(\x2\x2\x76F\x770\x5\x6"+
		"\x4\x2\x770\x771\x5\x190\xC9\x2\x771\x772\a\x84\x2\x2\x772\x774\x3\x2"+
		"\x2\x2\x773\x73C\x3\x2\x2\x2\x773\x75D\x3\x2\x2\x2\x773\x76E\x3\x2\x2"+
		"\x2\x774\x12F\x3\x2\x2\x2\x775\x777\x5\x13C\x9F\x2\x776\x775\x3\x2\x2"+
		"\x2\x776\x777\x3\x2\x2\x2\x777\x78A\x3\x2\x2\x2\x778\x779\a\x32\x2\x2"+
		"\x779\x77F\a\x84\x2\x2\x77A\x77C\x5\x13C\x9F\x2\x77B\x77A\x3\x2\x2\x2"+
		"\x77B\x77C\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x77E\aW\x2\x2\x77E\x780"+
		"\a\x84\x2\x2\x77F\x77B\x3\x2\x2\x2\x77F\x780\x3\x2\x2\x2\x780\x78B\x3"+
		"\x2\x2\x2\x781\x782\aW\x2\x2\x782\x788\a\x84\x2\x2\x783\x785\x5\x13C\x9F"+
		"\x2\x784\x783\x3\x2\x2\x2\x784\x785\x3\x2\x2\x2\x785\x786\x3\x2\x2\x2"+
		"\x786\x787\a\x32\x2\x2\x787\x789\a\x84\x2\x2\x788\x784\x3\x2\x2\x2\x788"+
		"\x789\x3\x2\x2\x2\x789\x78B\x3\x2\x2\x2\x78A\x778\x3\x2\x2\x2\x78A\x781"+
		"\x3\x2\x2\x2\x78B\x131\x3\x2\x2\x2\x78C\x78D\a\x83\x2\x2\x78D\x78E\x5"+
		"\x6\x4\x2\x78E\x133\x3\x2\x2\x2\x78F\x79B\a{\x2\x2\x790\x795\x5\x136\x9C"+
		"\x2\x791\x792\a\x82\x2\x2\x792\x794\x5\x136\x9C\x2\x793\x791\x3\x2\x2"+
		"\x2\x794\x797\x3\x2\x2\x2\x795\x793\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2"+
		"\x796\x799\x3\x2\x2\x2\x797\x795\x3\x2\x2\x2\x798\x79A\a\x82\x2\x2\x799"+
		"\x798\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x79C\x3\x2\x2\x2\x79B\x790"+
		"\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D\x79E\a|"+
		"\x2\x2\x79E\x135\x3\x2\x2\x2\x79F\x7A1\x5\x13C\x9F\x2\x7A0\x79F\x3\x2"+
		"\x2\x2\x7A0\x7A1\x3\x2\x2\x2\x7A1\x7A2\x3\x2\x2\x2\x7A2\x7A5\x5\x190\xC9"+
		"\x2\x7A3\x7A4\a\x8F\x2\x2\x7A4\x7A6\x5\x1A\xE\x2\x7A5\x7A3\x3\x2\x2\x2"+
		"\x7A5\x7A6\x3\x2\x2\x2\x7A6\x137\x3\x2\x2\x2\x7A7\x7A8\a}\x2\x2\x7A8\x7A9"+
		"\x5\x13A\x9E\x2\x7A9\x7AA\a\x83\x2\x2\x7AA\x7AC\x5\x142\xA2\x2\x7AB\x7AD"+
		"\a\x82\x2\x2\x7AC\x7AB\x3\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE\x3"+
		"\x2\x2\x2\x7AE\x7AF\a~\x2\x2\x7AF\x139\x3\x2\x2\x2\x7B0\x7B3\x5\x16A\xB6"+
		"\x2\x7B1\x7B3\x5\x190\xC9\x2\x7B2\x7B0\x3\x2\x2\x2\x7B2\x7B1\x3\x2\x2"+
		"\x2\x7B3\x13B\x3\x2\x2\x2\x7B4\x7B6\x5\x13E\xA0\x2\x7B5\x7B4\x3\x2\x2"+
		"\x2\x7B6\x7B7\x3\x2\x2\x2\x7B7\x7B5\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2"+
		"\x7B8\x13D\x3\x2\x2\x2\x7B9\x7BD\a}\x2\x2\x7BA\x7BB\x5\x140\xA1\x2\x7BB"+
		"\x7BC\a\x83\x2\x2\x7BC\x7BE\x3\x2\x2\x2\x7BD\x7BA\x3\x2\x2\x2\x7BD\x7BE"+
		"\x3\x2\x2\x2\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C1\x5\x142\xA2\x2\x7C0\x7C2"+
		"\a\x82\x2\x2\x7C1\x7C0\x3\x2\x2\x2\x7C1\x7C2\x3\x2\x2\x2\x7C2\x7C3\x3"+
		"\x2\x2\x2\x7C3\x7C4\a~\x2\x2\x7C4\x13F\x3\x2\x2\x2\x7C5\x7C8\x5\x16A\xB6"+
		"\x2\x7C6\x7C8\x5\x190\xC9\x2\x7C7\x7C5\x3\x2\x2\x2\x7C7\x7C6\x3\x2\x2"+
		"\x2\x7C8\x141\x3\x2\x2\x2\x7C9\x7CE\x5\x144\xA3\x2\x7CA\x7CB\a\x82\x2"+
		"\x2\x7CB\x7CD\x5\x144\xA3\x2\x7CC\x7CA\x3\x2\x2\x2\x7CD\x7D0\x3\x2\x2"+
		"\x2\x7CE\x7CC\x3\x2\x2\x2\x7CE\x7CF\x3\x2\x2\x2\x7CF\x143\x3\x2\x2\x2"+
		"\x7D0\x7CE\x3\x2\x2\x2\x7D1\x7DE\x5\x4\x3\x2\x7D2\x7DB\a\x7F\x2\x2\x7D3"+
		"\x7D8\x5\x146\xA4\x2\x7D4\x7D5\a\x82\x2\x2\x7D5\x7D7\x5\x146\xA4\x2\x7D6"+
		"\x7D4\x3\x2\x2\x2\x7D7\x7DA\x3\x2\x2\x2\x7D8\x7D6\x3\x2\x2\x2\x7D8\x7D9"+
		"\x3\x2\x2\x2\x7D9\x7DC\x3\x2\x2\x2\x7DA\x7D8\x3\x2\x2\x2\x7DB\x7D3\x3"+
		"\x2\x2\x2\x7DB\x7DC\x3\x2\x2\x2\x7DC\x7DD\x3\x2\x2\x2\x7DD\x7DF\a\x80"+
		"\x2\x2\x7DE\x7D2\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x145\x3\x2\x2"+
		"\x2\x7E0\x7E1\x5\x190\xC9\x2\x7E1\x7E2\a\x83\x2\x2\x7E2\x7E4\x3\x2\x2"+
		"\x2\x7E3\x7E0\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E5\x3\x2\x2\x2"+
		"\x7E5\x7E6\x5\x1A\xE\x2\x7E6\x147\x3\x2\x2\x2\x7E7\x7EA\x5\n\x6\x2\x7E8"+
		"\x7EA\x5\x12\n\x2\x7E9\x7E7\x3\x2\x2\x2\x7E9\x7E8\x3\x2\x2\x2\x7EA\x7EF"+
		"\x3\x2\x2\x2\x7EB\x7EE\x5\x120\x91\x2\x7EC\x7EE\a\x92\x2\x2\x7ED\x7EB"+
		"\x3\x2\x2\x2\x7ED\x7EC\x3\x2\x2\x2\x7EE\x7F1\x3\x2\x2\x2\x7EF\x7ED\x3"+
		"\x2\x2\x2\x7EF\x7F0\x3\x2\x2\x2\x7F0\x7F2\x3\x2\x2\x2\x7F1\x7EF\x3\x2"+
		"\x2\x2\x7F2\x7F3\a\x87\x2\x2\x7F3\x7F7\x3\x2\x2\x2\x7F4\x7F5\ak\x2\x2"+
		"\x7F5\x7F7\a\x87\x2\x2\x7F6\x7E9\x3\x2\x2\x2\x7F6\x7F4\x3\x2\x2\x2\x7F7"+
		"\x149\x3\x2\x2\x2\x7F8\x7FD\x5\x14C\xA7\x2\x7F9\x7FA\a\x82\x2\x2\x7FA"+
		"\x7FC\x5\x14C\xA7\x2\x7FB\x7F9\x3\x2\x2\x2\x7FC\x7FF\x3\x2\x2\x2\x7FD"+
		"\x7FB\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2\x7FE\x14B\x3\x2\x2\x2\x7FF\x7FD"+
		"\x3\x2\x2\x2\x800\x801\x5\x190\xC9\x2\x801\x802\a\x8F\x2\x2\x802\x803"+
		"\x5\x14E\xA8\x2\x803\x14D\x3\x2\x2\x2\x804\x806\a\x8A\x2\x2\x805\x804"+
		"\x3\x2\x2\x2\x805\x806\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x80A\x5"+
		"\x1A\xE\x2\x808\x80A\x5\x152\xAA\x2\x809\x805\x3\x2\x2\x2\x809\x808\x3"+
		"\x2\x2\x2\x80A\x14F\x3\x2\x2\x2\x80B\x80C\x5\x190\xC9\x2\x80C\x80D\a}"+
		"\x2\x2\x80D\x80E\x5\x1A\xE\x2\x80E\x80F\a~\x2\x2\x80F\x151\x3\x2\x2\x2"+
		"\x810\x811\aZ\x2\x2\x811\x812\x5\x6\x4\x2\x812\x813\a}\x2\x2\x813\x814"+
		"\x5\x1A\xE\x2\x814\x815\a~\x2\x2\x815\x153\x3\x2\x2\x2\x816\x817\a\x8F"+
		"\x2\x2\x817\x818\a\x91\x2\x2\x818\x819\x6\xAB\x2\x3\x819\x155\x3\x2\x2"+
		"\x2\x81A\x81B\a\x91\x2\x2\x81B\x81C\a\x91\x2\x2\x81C\x81D\x6\xAC\x3\x3"+
		"\x81D\x157\x3\x2\x2\x2\x81E\x81F\a\x91\x2\x2\x81F\x820\a\x9D\x2\x2\x820"+
		"\x821\x6\xAD\x4\x3\x821\x159\x3\x2\x2\x2\x822\x82A\x5\x15C\xAF\x2\x823"+
		"\x82A\x5\x15E\xB0\x2\x824\x82A\as\x2\x2\x825\x82A\at\x2\x2\x826\x82A\a"+
		"u\x2\x2\x827\x82A\av\x2\x2\x828\x82A\a\x44\x2\x2\x829\x822\x3\x2\x2\x2"+
		"\x829\x823\x3\x2\x2\x2\x829\x824\x3\x2\x2\x2\x829\x825\x3\x2\x2\x2\x829"+
		"\x826\x3\x2\x2\x2\x829\x827\x3\x2\x2\x2\x829\x828\x3\x2\x2\x2\x82A\x15B"+
		"\x3\x2\x2\x2\x82B\x82C\t\x11\x2\x2\x82C\x15D\x3\x2\x2\x2\x82D\x832\x5"+
		"\x160\xB1\x2\x82E\x832\x5\x162\xB2\x2\x82F\x832\aw\x2\x2\x830\x832\ax"+
		"\x2\x2\x831\x82D\x3\x2\x2\x2\x831\x82E\x3\x2\x2\x2\x831\x82F\x3\x2\x2"+
		"\x2\x831\x830\x3\x2\x2\x2\x832\x15F\x3\x2\x2\x2\x833\x837\ay\x2\x2\x834"+
		"\x836\x5\x164\xB3\x2\x835\x834\x3\x2\x2\x2\x836\x839\x3\x2\x2\x2\x837"+
		"\x835\x3\x2\x2\x2\x837\x838\x3\x2\x2\x2\x838\x83A\x3\x2\x2\x2\x839\x837"+
		"\x3\x2\x2\x2\x83A\x83B\a\xAC\x2\x2\x83B\x161\x3\x2\x2\x2\x83C\x840\az"+
		"\x2\x2\x83D\x83F\x5\x166\xB4\x2\x83E\x83D\x3\x2\x2\x2\x83F\x842\x3\x2"+
		"\x2\x2\x840\x83E\x3\x2\x2\x2\x840\x841\x3\x2\x2\x2\x841\x843\x3\x2\x2"+
		"\x2\x842\x840\x3\x2\x2\x2\x843\x844\a\xAC\x2\x2\x844\x163\x3\x2\x2\x2"+
		"\x845\x84A\x5\x168\xB5\x2\x846\x84A\a\xA8\x2\x2\x847\x84A\a\xAA\x2\x2"+
		"\x848\x84A\a\xAD\x2\x2\x849\x845\x3\x2\x2\x2\x849\x846\x3\x2\x2\x2\x849"+
		"\x847\x3\x2\x2\x2\x849\x848\x3\x2\x2\x2\x84A\x165\x3\x2\x2\x2\x84B\x850"+
		"\x5\x168\xB5\x2\x84C\x850\a\xA8\x2\x2\x84D\x850\a\xAB\x2\x2\x84E\x850"+
		"\a\xAE\x2\x2\x84F\x84B\x3\x2\x2\x2\x84F\x84C\x3\x2\x2\x2\x84F\x84D\x3"+
		"\x2\x2\x2\x84F\x84E\x3\x2\x2\x2\x850\x167\x3\x2\x2\x2\x851\x856\x5\x1A"+
		"\xE\x2\x852\x853\a\x82\x2\x2\x853\x855\x5\x1A\xE\x2\x854\x852\x3\x2\x2"+
		"\x2\x855\x858\x3\x2\x2\x2\x856\x854\x3\x2\x2\x2\x856\x857\x3\x2\x2\x2"+
		"\x857\x85F\x3\x2\x2\x2\x858\x856\x3\x2\x2\x2\x859\x85B\a\x83\x2\x2\x85A"+
		"\x85C\a\xB0\x2\x2\x85B\x85A\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2\x85D\x85B"+
		"\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x860\x3\x2\x2\x2\x85F\x859\x3"+
		"\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860\x169\x3\x2\x2\x2\x861\x862\t\x12"+
		"\x2\x2\x862\x16B\x3\x2\x2\x2\x863\x864\a\x1B\x2\x2\x864\x866\x5\x190\xC9"+
		"\x2\x865\x867\x5\xC4\x63\x2\x866\x865\x3\x2\x2\x2\x866\x867\x3\x2\x2\x2"+
		"\x867\x869\x3\x2\x2\x2\x868\x86A\x5\xC8\x65\x2\x869\x868\x3\x2\x2\x2\x869"+
		"\x86A\x3\x2\x2\x2\x86A\x86C\x3\x2\x2\x2\x86B\x86D\x5\xCCg\x2\x86C\x86B"+
		"\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E\x870\x5"+
		"\xD8m\x2\x86F\x871\a\x84\x2\x2\x870\x86F\x3\x2\x2\x2\x870\x871\x3\x2\x2"+
		"\x2\x871\x16D\x3\x2\x2\x2\x872\x873\a]\x2\x2\x873\x875\x5\x190\xC9\x2"+
		"\x874\x876\x5\xC4\x63\x2\x875\x874\x3\x2\x2\x2\x875\x876\x3\x2\x2\x2\x876"+
		"\x878\x3\x2\x2\x2\x877\x879\x5\x118\x8D\x2\x878\x877\x3\x2\x2\x2\x878"+
		"\x879\x3\x2\x2\x2\x879\x87B\x3\x2\x2\x2\x87A\x87C\x5\xCCg\x2\x87B\x87A"+
		"\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x87F\x5"+
		"\x11A\x8E\x2\x87E\x880\a\x84\x2\x2\x87F\x87E\x3\x2\x2\x2\x87F\x880\x3"+
		"\x2\x2\x2\x880\x16F\x3\x2\x2\x2\x881\x882\a\x39\x2\x2\x882\x884\x5\x190"+
		"\xC9\x2\x883\x885\x5\x124\x93\x2\x884\x883\x3\x2\x2\x2\x884\x885\x3\x2"+
		"\x2\x2\x885\x887\x3\x2\x2\x2\x886\x888\x5\x12A\x96\x2\x887\x886\x3\x2"+
		"\x2\x2\x887\x888\x3\x2\x2\x2\x888\x88A\x3\x2\x2\x2\x889\x88B\x5\xCCg\x2"+
		"\x88A\x889\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88C\x3\x2\x2\x2\x88C"+
		"\x88E\x5\x12C\x97\x2\x88D\x88F\a\x84\x2\x2\x88E\x88D\x3\x2\x2\x2\x88E"+
		"\x88F\x3\x2\x2\x2\x88F\x171\x3\x2\x2\x2\x890\x891\a&\x2\x2\x891\x893\x5"+
		"\x190\xC9\x2\x892\x894\x5\x132\x9A\x2\x893\x892\x3\x2\x2\x2\x893\x894"+
		"\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x897\x5\x134\x9B\x2\x896\x898"+
		"\a\x84\x2\x2\x897\x896\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2\x898\x173\x3"+
		"\x2\x2\x2\x899\x89A\a \x2\x2\x89A\x89B\x5\xF0y\x2\x89B\x89D\x5\x190\xC9"+
		"\x2\x89C\x89E\x5\x124\x93\x2\x89D\x89C\x3\x2\x2\x2\x89D\x89E\x3\x2\x2"+
		"\x2\x89E\x89F\x3\x2\x2\x2\x89F\x8A1\a\x7F\x2\x2\x8A0\x8A2\x5\xF6|\x2\x8A1"+
		"\x8A0\x3\x2\x2\x2\x8A1\x8A2\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8A5"+
		"\a\x80\x2\x2\x8A4\x8A6\x5\xCCg\x2\x8A5\x8A4\x3\x2\x2\x2\x8A5\x8A6\x3\x2"+
		"\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8A8\a\x84\x2\x2\x8A8\x175\x3\x2\x2"+
		"\x2\x8A9\x8AA\a(\x2\x2\x8AA\x8B3\x5\x6\x4\x2\x8AB\x8AC\x5\xEAv\x2\x8AC"+
		"\x8AD\a\x84\x2\x2\x8AD\x8B4\x3\x2\x2\x2\x8AE\x8AF\x5\xF2z\x2\x8AF\x8B0"+
		"\a{\x2\x2\x8B0\x8B1\x5\x10A\x86\x2\x8B1\x8B2\a|\x2\x2\x8B2\x8B4\x3\x2"+
		"\x2\x2\x8B3\x8AB\x3\x2\x2\x2\x8B3\x8AE\x3\x2\x2\x2\x8B4\x177\x3\x2\x2"+
		"\x2\x8B5\x8B6\x5\xEAv\x2\x8B6\x8B7\a\x84\x2\x2\x8B7\x179\x3\x2\x2\x2\x8B8"+
		"\x8C6\x5\xF2z\x2\x8B9\x8BA\a{\x2\x2\x8BA\x8BB\x5\x100\x81\x2\x8BB\x8C0"+
		"\a|\x2\x2\x8BC\x8BD\a\x8F\x2\x2\x8BD\x8BE\x5\xEEx\x2\x8BE\x8BF\a\x84\x2"+
		"\x2\x8BF\x8C1\x3\x2\x2\x2\x8C0\x8BC\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2"+
		"\x8C1\x8C7\x3\x2\x2\x2\x8C2\x8C3\x5\x154\xAB\x2\x8C3\x8C4\x5\x1A\xE\x2"+
		"\x8C4\x8C5\a\x84\x2\x2\x8C5\x8C7\x3\x2\x2\x2\x8C6\x8B9\x3\x2\x2\x2\x8C6"+
		"\x8C2\x3\x2\x2\x2\x8C7\x17B\x3\x2\x2\x2\x8C8\x8C9\a\x1C\x2\x2\x8C9\x8CA"+
		"\x5\x6\x4\x2\x8CA\x8CB\x5\xE6t\x2\x8CB\x8CC\a\x84\x2\x2\x8CC\x17D\x3\x2"+
		"\x2\x2\x8CD\x8CE\a_\x2\x2\x8CE\x8CF\a}\x2\x2\x8CF\x8D0\x5\xF6|\x2\x8D0"+
		"\x8D9\a~\x2\x2\x8D1\x8D2\a{\x2\x2\x8D2\x8D3\x5\x100\x81\x2\x8D3\x8D4\a"+
		"|\x2\x2\x8D4\x8DA\x3\x2\x2\x2\x8D5\x8D6\x5\x154\xAB\x2\x8D6\x8D7\x5\x1A"+
		"\xE\x2\x8D7\x8D8\a\x84\x2\x2\x8D8\x8DA\x3\x2\x2\x2\x8D9\x8D1\x3\x2\x2"+
		"\x2\x8D9\x8D5\x3\x2\x2\x2\x8DA\x17F\x3\x2\x2\x2\x8DB\x8DC\a\x8E\x2\x2"+
		"\x8DC\x8DD\x5\x190\xC9\x2\x8DD\x8DE\a\x7F\x2\x2\x8DE\x8DF\a\x80\x2\x2"+
		"\x8DF\x8E0\x5\x116\x8C\x2\x8E0\x181\x3\x2\x2\x2\x8E1\x8E2\x5\x190\xC9"+
		"\x2\x8E2\x8E4\a\x7F\x2\x2\x8E3\x8E5\x5\xF6|\x2\x8E4\x8E3\x3\x2\x2\x2\x8E4"+
		"\x8E5\x3\x2\x2\x2\x8E5\x8E6\x3\x2\x2\x2\x8E6\x8E8\a\x80\x2\x2\x8E7\x8E9"+
		"\x5\x114\x8B\x2\x8E8\x8E7\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EA"+
		"\x3\x2\x2\x2\x8EA\x8EB\x5\x116\x8C\x2\x8EB\x183\x3\x2\x2\x2\x8EC\x8EE"+
		"\x5\x186\xC4\x2\x8ED\x8EF\x5\xC4\x63\x2\x8EE\x8ED\x3\x2\x2\x2\x8EE\x8EF"+
		"\x3\x2\x2\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0\x8F2\a\x7F\x2\x2\x8F1\x8F3\x5"+
		"\xF6|\x2\x8F2\x8F1\x3\x2\x2\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F4\x3\x2\x2"+
		"\x2\x8F4\x8F6\a\x80\x2\x2\x8F5\x8F7\x5\xCCg\x2\x8F6\x8F5\x3\x2\x2\x2\x8F6"+
		"\x8F7\x3\x2\x2\x2\x8F7\x8FD\x3\x2\x2\x2\x8F8\x8FE\x5\xF4{\x2\x8F9\x8FA"+
		"\x5\x154\xAB\x2\x8FA\x8FB\x5\x1A\xE\x2\x8FB\x8FC\a\x84\x2\x2\x8FC\x8FE"+
		"\x3\x2\x2\x2\x8FD\x8F8\x3\x2\x2\x2\x8FD\x8F9\x3\x2\x2\x2\x8FE\x185\x3"+
		"\x2\x2\x2\x8FF\x905\x5\x190\xC9\x2\x900\x901\x5\x190\xC9\x2\x901\x902"+
		"\a\x93\x2\x2\x902\x903\x5\x190\xC9\x2\x903\x905\x3\x2\x2\x2\x904\x8FF"+
		"\x3\x2\x2\x2\x904\x900\x3\x2\x2\x2\x905\x90D\x3\x2\x2\x2\x906\x908\x5"+
		"\x14\v\x2\x907\x906\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908\x909\x3\x2"+
		"\x2\x2\x909\x90A\a\x81\x2\x2\x90A\x90C\x5\x190\xC9\x2\x90B\x907\x3\x2"+
		"\x2\x2\x90C\x90F\x3\x2\x2\x2\x90D\x90B\x3\x2\x2\x2\x90D\x90E\x3\x2\x2"+
		"\x2\x90E\x187\x3\x2\x2\x2\x90F\x90D\x3\x2\x2\x2\x910\x911\aG\x2\x2\x911"+
		"\x912\x5\x110\x89\x2\x912\x913\a\x7F\x2\x2\x913\x916\x5\x18A\xC6\x2\x914"+
		"\x915\a\x82\x2\x2\x915\x917\x5\x18A\xC6\x2\x916\x914\x3\x2\x2\x2\x916"+
		"\x917\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x91E\a\x80\x2\x2\x919\x91F"+
		"\x5\x116\x8C\x2\x91A\x91B\x5\x154\xAB\x2\x91B\x91C\x5\x1A\xE\x2\x91C\x91D"+
		"\a\x84\x2\x2\x91D\x91F\x3\x2\x2\x2\x91E\x919\x3\x2\x2\x2\x91E\x91A\x3"+
		"\x2\x2\x2\x91F\x189\x3\x2\x2\x2\x920\x921\x5\x6\x4\x2\x921\x924\x5\x190"+
		"\xC9\x2\x922\x923\a\x8F\x2\x2\x923\x925\x5\x1A\xE\x2\x924\x922\x3\x2\x2"+
		"\x2\x924\x925\x3\x2\x2\x2\x925\x18B\x3\x2\x2\x2\x926\x928\a\x7F\x2\x2"+
		"\x927\x929\x5\x16\f\x2\x928\x927\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929"+
		"\x92A\x3\x2\x2\x2\x92A\x92B\a\x80\x2\x2\x92B\x18D\x3\x2\x2\x2\x92C\x92E"+
		"\a\x7F\x2\x2\x92D\x92F\x5\x16\f\x2\x92E\x92D\x3\x2\x2\x2\x92E\x92F\x3"+
		"\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x932\a\x80\x2\x2\x931\x933\x5J&\x2"+
		"\x932\x931\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\x18F\x3\x2\x2\x2\x934"+
		"\x935\t\x13\x2\x2\x935\x191\x3\x2\x2\x2\x12A\x193\x196\x199\x19E\x1A2"+
		"\x1A8\x1AB\x1B0\x1B4\x1BB\x1BD\x1C4\x1C8\x1CD\x1D7\x1DF\x1E9\x1EF\x1F2"+
		"\x1F8\x1FD\x20E\x216\x21B\x222\x22A\x232\x23A\x242\x24A\x254\x256\x25C"+
		"\x261\x269\x271\x28C\x292\x29B\x2A0\x2A5\x2AB\x2B9\x2BF\x2CB\x2CF\x2D4"+
		"\x2D8\x2DE\x2E5\x2F8\x2FD\x300\x30F\x315\x318\x31D\x320\x328\x330\x33B"+
		"\x340\x345\x347\x350\x358\x35F\x367\x36B\x374\x379\x37B\x384\x38C\x390"+
		"\x395\x397\x39C\x3A0\x3A7\x3AF\x3B1\x3B5\x3B8\x3C9\x3D0\x3D4\x3DE\x3E3"+
		"\x3EA\x3F3\x3F8\x3FF\x40B\x416\x41E\x423\x42C\x438\x43D\x441\x44E\x458"+
		"\x46E\x472\x476\x48C\x491\x496\x49D\x4A0\x4B6\x4C2\x4C6\x4D0\x4D6\x4DB"+
		"\x4E3\x4E8\x4F2\x4F7\x4FF\x502\x509\x510\x514\x517\x51D\x521\x527\x535"+
		"\x53B\x542\x547\x54A\x54D\x554\x55E\x56F\x574\x578\x57B\x57E\x585\x58B"+
		"\x593\x599\x5A3\x5AB\x5B1\x5BC\x5C0\x5C2\x5C7\x5CE\x5D7\x5DE\x5E1\x5E4"+
		"\x5E8\x5ED\x5FA\x604\x610\x617\x623\x629\x62D\x631\x637\x63D\x63F\x646"+
		"\x64A\x64D\x651\x656\x65D\x660\x665\x66A\x66C\x66F\x672\x678\x67B\x687"+
		"\x68B\x68E\x698\x69B\x6A1\x6BC\x6C9\x6CF\x6D8\x6DE\x6E1\x6E9\x6ED\x6F3"+
		"\x6F9\x6FF\x70A\x70E\x710\x71A\x720\x723\x730\x736\x739\x73C\x741\x745"+
		"\x749\x75A\x75D\x762\x766\x76A\x773\x776\x77B\x77F\x784\x788\x78A\x795"+
		"\x799\x79B\x7A0\x7A5\x7AC\x7B2\x7B7\x7BD\x7C1\x7C7\x7CE\x7D8\x7DB\x7DE"+
		"\x7E3\x7E9\x7ED\x7EF\x7F6\x7FD\x805\x809\x829\x831\x837\x840\x849\x84F"+
		"\x856\x85D\x85F\x866\x869\x86C\x870\x875\x878\x87B\x87F\x884\x887\x88A"+
		"\x88E\x893\x897\x89D\x8A1\x8A5\x8B3\x8C0\x8C6\x8D9\x8E4\x8E8\x8EE\x8F2"+
		"\x8F6\x8FD\x904\x907\x90D\x916\x91E\x924\x928\x92E\x932";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApplication1
